// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: autoware_auto_control_msgs.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace AutowareAutoControlMsgs {

  /// <summary>Holder for reflection information generated from autoware_auto_control_msgs.proto</summary>
  public static partial class AutowareAutoControlMsgsReflection {

    #region Descriptor
    /// <summary>File descriptor for autoware_auto_control_msgs.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AutowareAutoControlMsgsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiBhdXRvd2FyZV9hdXRvX2NvbnRyb2xfbXNncy5wcm90bxIaYXV0b3dhcmVf",
            "YXV0b19jb250cm9sX21zZ3MaGGJ1aWx0aW5faW50ZXJmYWNlcy5wcm90byKE",
            "AQoXQWNrZXJtYW5uTGF0ZXJhbENvbW1hbmQSJwoFc3RhbXAYASABKAsyGC5i",
            "dWlsdGluX2ludGVyZmFjZXMuVGltZRIbChNzdGVlcmluZ190aXJlX2FuZ2xl",
            "GAIgASgCEiMKG3N0ZWVyaW5nX3RpcmVfcm90YXRpb25fcmF0ZRgDIAEoAiJx",
            "ChNMb25naXR1ZGluYWxDb21tYW5kEicKBXN0YW1wGAEgASgLMhguYnVpbHRp",
            "bl9pbnRlcmZhY2VzLlRpbWUSDQoFc3BlZWQYAiABKAISFAoMYWNjZWxlcmF0",
            "aW9uGAMgASgCEgwKBGplcmsYBCABKAIizwEKF0Fja2VybWFubkNvbnRyb2xD",
            "b21tYW5kEicKBXN0YW1wGAEgASgLMhguYnVpbHRpbl9pbnRlcmZhY2VzLlRp",
            "bWUSRAoHbGF0ZXJhbBgCIAEoCzIzLmF1dG93YXJlX2F1dG9fY29udHJvbF9t",
            "c2dzLkFja2VybWFubkxhdGVyYWxDb21tYW5kEkUKDGxvbmdpdHVkaW5hbBgD",
            "IAEoCzIvLmF1dG93YXJlX2F1dG9fY29udHJvbF9tc2dzLkxvbmdpdHVkaW5h",
            "bENvbW1hbmRiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::BuiltinInterfaces.BuiltinInterfacesReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::AutowareAutoControlMsgs.AckermannLateralCommand), global::AutowareAutoControlMsgs.AckermannLateralCommand.Parser, new[]{ "Stamp", "SteeringTireAngle", "SteeringTireRotationRate" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AutowareAutoControlMsgs.LongitudinalCommand), global::AutowareAutoControlMsgs.LongitudinalCommand.Parser, new[]{ "Stamp", "Speed", "Acceleration", "Jerk" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AutowareAutoControlMsgs.AckermannControlCommand), global::AutowareAutoControlMsgs.AckermannControlCommand.Parser, new[]{ "Stamp", "Lateral", "Longitudinal" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class AckermannLateralCommand : pb::IMessage<AckermannLateralCommand> {
    private static readonly pb::MessageParser<AckermannLateralCommand> _parser = new pb::MessageParser<AckermannLateralCommand>(() => new AckermannLateralCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckermannLateralCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AutowareAutoControlMsgs.AutowareAutoControlMsgsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckermannLateralCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckermannLateralCommand(AckermannLateralCommand other) : this() {
      stamp_ = other.stamp_ != null ? other.stamp_.Clone() : null;
      steeringTireAngle_ = other.steeringTireAngle_;
      steeringTireRotationRate_ = other.steeringTireRotationRate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckermannLateralCommand Clone() {
      return new AckermannLateralCommand(this);
    }

    /// <summary>Field number for the "stamp" field.</summary>
    public const int StampFieldNumber = 1;
    private global::BuiltinInterfaces.Time stamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::BuiltinInterfaces.Time Stamp {
      get { return stamp_; }
      set {
        stamp_ = value;
      }
    }

    /// <summary>Field number for the "steering_tire_angle" field.</summary>
    public const int SteeringTireAngleFieldNumber = 2;
    private float steeringTireAngle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SteeringTireAngle {
      get { return steeringTireAngle_; }
      set {
        steeringTireAngle_ = value;
      }
    }

    /// <summary>Field number for the "steering_tire_rotation_rate" field.</summary>
    public const int SteeringTireRotationRateFieldNumber = 3;
    private float steeringTireRotationRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SteeringTireRotationRate {
      get { return steeringTireRotationRate_; }
      set {
        steeringTireRotationRate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckermannLateralCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckermannLateralCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Stamp, other.Stamp)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SteeringTireAngle, other.SteeringTireAngle)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SteeringTireRotationRate, other.SteeringTireRotationRate)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (stamp_ != null) hash ^= Stamp.GetHashCode();
      if (SteeringTireAngle != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SteeringTireAngle);
      if (SteeringTireRotationRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SteeringTireRotationRate);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (stamp_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Stamp);
      }
      if (SteeringTireAngle != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(SteeringTireAngle);
      }
      if (SteeringTireRotationRate != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(SteeringTireRotationRate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (stamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Stamp);
      }
      if (SteeringTireAngle != 0F) {
        size += 1 + 4;
      }
      if (SteeringTireRotationRate != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AckermannLateralCommand other) {
      if (other == null) {
        return;
      }
      if (other.stamp_ != null) {
        if (stamp_ == null) {
          Stamp = new global::BuiltinInterfaces.Time();
        }
        Stamp.MergeFrom(other.Stamp);
      }
      if (other.SteeringTireAngle != 0F) {
        SteeringTireAngle = other.SteeringTireAngle;
      }
      if (other.SteeringTireRotationRate != 0F) {
        SteeringTireRotationRate = other.SteeringTireRotationRate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (stamp_ == null) {
              Stamp = new global::BuiltinInterfaces.Time();
            }
            input.ReadMessage(Stamp);
            break;
          }
          case 21: {
            SteeringTireAngle = input.ReadFloat();
            break;
          }
          case 29: {
            SteeringTireRotationRate = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LongitudinalCommand : pb::IMessage<LongitudinalCommand> {
    private static readonly pb::MessageParser<LongitudinalCommand> _parser = new pb::MessageParser<LongitudinalCommand>(() => new LongitudinalCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LongitudinalCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AutowareAutoControlMsgs.AutowareAutoControlMsgsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LongitudinalCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LongitudinalCommand(LongitudinalCommand other) : this() {
      stamp_ = other.stamp_ != null ? other.stamp_.Clone() : null;
      speed_ = other.speed_;
      acceleration_ = other.acceleration_;
      jerk_ = other.jerk_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LongitudinalCommand Clone() {
      return new LongitudinalCommand(this);
    }

    /// <summary>Field number for the "stamp" field.</summary>
    public const int StampFieldNumber = 1;
    private global::BuiltinInterfaces.Time stamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::BuiltinInterfaces.Time Stamp {
      get { return stamp_; }
      set {
        stamp_ = value;
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 2;
    private float speed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "acceleration" field.</summary>
    public const int AccelerationFieldNumber = 3;
    private float acceleration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Acceleration {
      get { return acceleration_; }
      set {
        acceleration_ = value;
      }
    }

    /// <summary>Field number for the "jerk" field.</summary>
    public const int JerkFieldNumber = 4;
    private float jerk_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Jerk {
      get { return jerk_; }
      set {
        jerk_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LongitudinalCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LongitudinalCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Stamp, other.Stamp)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Speed, other.Speed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Acceleration, other.Acceleration)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Jerk, other.Jerk)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (stamp_ != null) hash ^= Stamp.GetHashCode();
      if (Speed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Speed);
      if (Acceleration != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Acceleration);
      if (Jerk != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Jerk);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (stamp_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Stamp);
      }
      if (Speed != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Speed);
      }
      if (Acceleration != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Acceleration);
      }
      if (Jerk != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Jerk);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (stamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Stamp);
      }
      if (Speed != 0F) {
        size += 1 + 4;
      }
      if (Acceleration != 0F) {
        size += 1 + 4;
      }
      if (Jerk != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LongitudinalCommand other) {
      if (other == null) {
        return;
      }
      if (other.stamp_ != null) {
        if (stamp_ == null) {
          Stamp = new global::BuiltinInterfaces.Time();
        }
        Stamp.MergeFrom(other.Stamp);
      }
      if (other.Speed != 0F) {
        Speed = other.Speed;
      }
      if (other.Acceleration != 0F) {
        Acceleration = other.Acceleration;
      }
      if (other.Jerk != 0F) {
        Jerk = other.Jerk;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (stamp_ == null) {
              Stamp = new global::BuiltinInterfaces.Time();
            }
            input.ReadMessage(Stamp);
            break;
          }
          case 21: {
            Speed = input.ReadFloat();
            break;
          }
          case 29: {
            Acceleration = input.ReadFloat();
            break;
          }
          case 37: {
            Jerk = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AckermannControlCommand : pb::IMessage<AckermannControlCommand> {
    private static readonly pb::MessageParser<AckermannControlCommand> _parser = new pb::MessageParser<AckermannControlCommand>(() => new AckermannControlCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckermannControlCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AutowareAutoControlMsgs.AutowareAutoControlMsgsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckermannControlCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckermannControlCommand(AckermannControlCommand other) : this() {
      stamp_ = other.stamp_ != null ? other.stamp_.Clone() : null;
      lateral_ = other.lateral_ != null ? other.lateral_.Clone() : null;
      longitudinal_ = other.longitudinal_ != null ? other.longitudinal_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckermannControlCommand Clone() {
      return new AckermannControlCommand(this);
    }

    /// <summary>Field number for the "stamp" field.</summary>
    public const int StampFieldNumber = 1;
    private global::BuiltinInterfaces.Time stamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::BuiltinInterfaces.Time Stamp {
      get { return stamp_; }
      set {
        stamp_ = value;
      }
    }

    /// <summary>Field number for the "lateral" field.</summary>
    public const int LateralFieldNumber = 2;
    private global::AutowareAutoControlMsgs.AckermannLateralCommand lateral_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AutowareAutoControlMsgs.AckermannLateralCommand Lateral {
      get { return lateral_; }
      set {
        lateral_ = value;
      }
    }

    /// <summary>Field number for the "longitudinal" field.</summary>
    public const int LongitudinalFieldNumber = 3;
    private global::AutowareAutoControlMsgs.LongitudinalCommand longitudinal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AutowareAutoControlMsgs.LongitudinalCommand Longitudinal {
      get { return longitudinal_; }
      set {
        longitudinal_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckermannControlCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckermannControlCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Stamp, other.Stamp)) return false;
      if (!object.Equals(Lateral, other.Lateral)) return false;
      if (!object.Equals(Longitudinal, other.Longitudinal)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (stamp_ != null) hash ^= Stamp.GetHashCode();
      if (lateral_ != null) hash ^= Lateral.GetHashCode();
      if (longitudinal_ != null) hash ^= Longitudinal.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (stamp_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Stamp);
      }
      if (lateral_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Lateral);
      }
      if (longitudinal_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Longitudinal);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (stamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Stamp);
      }
      if (lateral_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Lateral);
      }
      if (longitudinal_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Longitudinal);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AckermannControlCommand other) {
      if (other == null) {
        return;
      }
      if (other.stamp_ != null) {
        if (stamp_ == null) {
          Stamp = new global::BuiltinInterfaces.Time();
        }
        Stamp.MergeFrom(other.Stamp);
      }
      if (other.lateral_ != null) {
        if (lateral_ == null) {
          Lateral = new global::AutowareAutoControlMsgs.AckermannLateralCommand();
        }
        Lateral.MergeFrom(other.Lateral);
      }
      if (other.longitudinal_ != null) {
        if (longitudinal_ == null) {
          Longitudinal = new global::AutowareAutoControlMsgs.LongitudinalCommand();
        }
        Longitudinal.MergeFrom(other.Longitudinal);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (stamp_ == null) {
              Stamp = new global::BuiltinInterfaces.Time();
            }
            input.ReadMessage(Stamp);
            break;
          }
          case 18: {
            if (lateral_ == null) {
              Lateral = new global::AutowareAutoControlMsgs.AckermannLateralCommand();
            }
            input.ReadMessage(Lateral);
            break;
          }
          case 26: {
            if (longitudinal_ == null) {
              Longitudinal = new global::AutowareAutoControlMsgs.LongitudinalCommand();
            }
            input.ReadMessage(Longitudinal);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
