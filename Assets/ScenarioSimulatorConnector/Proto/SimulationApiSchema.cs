// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: simulation_api_schema.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SimulationApiSchema {

  /// <summary>Holder for reflection information generated from simulation_api_schema.proto</summary>
  public static partial class SimulationApiSchemaReflection {

    #region Descriptor
    /// <summary>File descriptor for simulation_api_schema.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SimulationApiSchemaReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChtzaW11bGF0aW9uX2FwaV9zY2hlbWEucHJvdG8SFXNpbXVsYXRpb25fYXBp",
            "X3NjaGVtYRoYYnVpbHRpbl9pbnRlcmZhY2VzLnByb3RvGhNnZW9tZXRyeV9t",
            "c2dzLnByb3RvGhx0cmFmZmljX3NpbXVsYXRvcl9tc2dzLnByb3RvIvQBCgxF",
            "bnRpdHlTdGF0dXMSMAoEdHlwZRgBIAEoCzIiLnRyYWZmaWNfc2ltdWxhdG9y",
            "X21zZ3MuRW50aXR5VHlwZRI2CgdzdWJ0eXBlGAIgASgLMiUudHJhZmZpY19z",
            "aW11bGF0b3JfbXNncy5FbnRpdHlTdWJ0eXBlEgwKBHRpbWUYAyABKAESDAoE",
            "bmFtZRgEIAEoCRI7Cg1hY3Rpb25fc3RhdHVzGAUgASgLMiQudHJhZmZpY19z",
            "aW11bGF0b3JfbXNncy5BY3Rpb25TdGF0dXMSIQoEcG9zZRgGIAEoCzITLmdl",
            "b21ldHJ5X21zZ3MuUG9zZSIuCgZSZXN1bHQSDwoHc3VjY2VzcxgBIAEoCBIT",
            "CgtkZXNjcmlwdGlvbhgCIAEoCSJECidQc2V1ZG9UcmFmZmljTGlnaHREZXRl",
            "Y3RvckNvbmZpZ3VyYXRpb24SGQoRYXJjaGl0ZWN0dXJlX3R5cGUYASABKAki",
            "qgEKEkxpZGFyQ29uZmlndXJhdGlvbhIOCgZlbnRpdHkYASABKAkSHQoVaG9y",
            "aXpvbnRhbF9yZXNvbHV0aW9uGAIgASgBEhcKD3ZlcnRpY2FsX2FuZ2xlcxgD",
            "IAMoARIVCg1zY2FuX2R1cmF0aW9uGAQgASgBEhkKEWFyY2hpdGVjdHVyZV90",
            "eXBlGAUgASgJEhoKEmxpZGFyX3NlbnNvcl9kZWxheRgGIAEoASKzAgocRGV0",
            "ZWN0aW9uU2Vuc29yQ29uZmlndXJhdGlvbhIOCgZlbnRpdHkYASABKAkSFwoP",
            "dXBkYXRlX2R1cmF0aW9uGAIgASgBEg0KBXJhbmdlGAMgASgBEhkKEWFyY2hp",
            "dGVjdHVyZV90eXBlGAQgASgJEiMKG2RldGVjdF9hbGxfb2JqZWN0c19pbl9y",
            "YW5nZRgFIAEoCBIYChBwb3Nfbm9pc2Vfc3RkZGV2GAYgASgBEhMKC3JhbmRv",
            "bV9zZWVkGAcgASgFEhsKE3Byb2JhYmlsaXR5X29mX2xvc3QYCCABKAESIAoY",
            "b2JqZWN0X3JlY29nbml0aW9uX2RlbGF5GAkgASgBEi0KJW9iamVjdF9yZWNv",
            "Z25pdGlvbl9ncm91bmRfdHJ1dGhfZGVsYXkYCiABKAEiwQEKIE9jY3VwYW5j",
            "eUdyaWRTZW5zb3JDb25maWd1cmF0aW9uEg4KBmVudGl0eRgBIAEoCRIXCg91",
            "cGRhdGVfZHVyYXRpb24YAiABKAESEgoKcmVzb2x1dGlvbhgDIAEoARINCgV3",
            "aWR0aBgEIAEoDRIOCgZoZWlnaHQYBSABKA0SGQoRYXJjaGl0ZWN0dXJlX3R5",
            "cGUYBiABKAkSDQoFcmFuZ2UYByABKAESFwoPZmlsdGVyX2J5X3JhbmdlGAgg",
            "ASgIIoMBChNVcGRhdGVkRW50aXR5U3RhdHVzEgwKBG5hbWUYASABKAkSOwoN",
            "YWN0aW9uX3N0YXR1cxgCIAEoCzIkLnRyYWZmaWNfc2ltdWxhdG9yX21zZ3Mu",
            "QWN0aW9uU3RhdHVzEiEKBHBvc2UYAyABKAsyEy5nZW9tZXRyeV9tc2dzLlBv",
            "c2UiqgEKEUluaXRpYWxpemVSZXF1ZXN0EhcKD3JlYWx0aW1lX2ZhY3RvchgB",
            "IAEoARIRCglzdGVwX3RpbWUYAiABKAESFwoPaW5pdGlhbGl6ZV90aW1lGAMg",
            "ASgBEjUKE2luaXRpYWxpemVfcm9zX3RpbWUYBCABKAsyGC5idWlsdGluX2lu",
            "dGVyZmFjZXMuVGltZRIZChFsYW5lbGV0Ml9tYXBfcGF0aBgFIAEoCSJDChJJ",
            "bml0aWFsaXplUmVzcG9uc2USLQoGcmVzdWx0GAEgASgLMh0uc2ltdWxhdGlv",
            "bl9hcGlfc2NoZW1hLlJlc3VsdCKIAQoSVXBkYXRlRnJhbWVSZXF1ZXN0Eh8K",
            "F2N1cnJlbnRfc2ltdWxhdGlvbl90aW1lGAEgASgBEh0KFWN1cnJlbnRfc2Nl",
            "bmFyaW9fdGltZRgCIAEoARIyChBjdXJyZW50X3Jvc190aW1lGAMgASgLMhgu",
            "YnVpbHRpbl9pbnRlcmZhY2VzLlRpbWUiRAoTVXBkYXRlRnJhbWVSZXNwb25z",
            "ZRItCgZyZXN1bHQYASABKAsyHS5zaW11bGF0aW9uX2FwaV9zY2hlbWEuUmVz",
            "dWx0IrcBChlTcGF3blZlaGljbGVFbnRpdHlSZXF1ZXN0Ej0KCnBhcmFtZXRl",
            "cnMYASABKAsyKS50cmFmZmljX3NpbXVsYXRvcl9tc2dzLlZlaGljbGVQYXJh",
            "bWV0ZXJzEg4KBmlzX2VnbxgCIAEoCBIRCglhc3NldF9rZXkYAyABKAkSIQoE",
            "cG9zZRgEIAEoCzITLmdlb21ldHJ5X21zZ3MuUG9zZRIVCg1pbml0aWFsX3Nw",
            "ZWVkGAUgASgBIksKGlNwYXduVmVoaWNsZUVudGl0eVJlc3BvbnNlEi0KBnJl",
            "c3VsdBgBIAEoCzIdLnNpbXVsYXRpb25fYXBpX3NjaGVtYS5SZXN1bHQilgEK",
            "HFNwYXduUGVkZXN0cmlhbkVudGl0eVJlcXVlc3QSQAoKcGFyYW1ldGVycxgB",
            "IAEoCzIsLnRyYWZmaWNfc2ltdWxhdG9yX21zZ3MuUGVkZXN0cmlhblBhcmFt",
            "ZXRlcnMSEQoJYXNzZXRfa2V5GAIgASgJEiEKBHBvc2UYAyABKAsyEy5nZW9t",
            "ZXRyeV9tc2dzLlBvc2UiTgodU3Bhd25QZWRlc3RyaWFuRW50aXR5UmVzcG9u",
            "c2USLQoGcmVzdWx0GAEgASgLMh0uc2ltdWxhdGlvbl9hcGlfc2NoZW1hLlJl",
            "c3VsdCKWAQocU3Bhd25NaXNjT2JqZWN0RW50aXR5UmVxdWVzdBJACgpwYXJh",
            "bWV0ZXJzGAEgASgLMiwudHJhZmZpY19zaW11bGF0b3JfbXNncy5NaXNjT2Jq",
            "ZWN0UGFyYW1ldGVycxIRCglhc3NldF9rZXkYAiABKAkSIQoEcG9zZRgDIAEo",
            "CzITLmdlb21ldHJ5X21zZ3MuUG9zZSJOCh1TcGF3bk1pc2NPYmplY3RFbnRp",
            "dHlSZXNwb25zZRItCgZyZXN1bHQYASABKAsyHS5zaW11bGF0aW9uX2FwaV9z",
            "Y2hlbWEuUmVzdWx0IiQKFERlc3Bhd25FbnRpdHlSZXF1ZXN0EgwKBG5hbWUY",
            "ASABKAkiRgoVRGVzcGF3bkVudGl0eVJlc3BvbnNlEi0KBnJlc3VsdBgBIAEo",
            "CzIdLnNpbXVsYXRpb25fYXBpX3NjaGVtYS5SZXN1bHQiawoZVXBkYXRlRW50",
            "aXR5U3RhdHVzUmVxdWVzdBIzCgZzdGF0dXMYASADKAsyIy5zaW11bGF0aW9u",
            "X2FwaV9zY2hlbWEuRW50aXR5U3RhdHVzEhkKEW5wY19sb2dpY19zdGFydGVk",
            "GAIgASgIIocBChpVcGRhdGVFbnRpdHlTdGF0dXNSZXNwb25zZRItCgZyZXN1",
            "bHQYASABKAsyHS5zaW11bGF0aW9uX2FwaV9zY2hlbWEuUmVzdWx0EjoKBnN0",
            "YXR1cxgCIAMoCzIqLnNpbXVsYXRpb25fYXBpX3NjaGVtYS5VcGRhdGVkRW50",
            "aXR5U3RhdHVzIoABCidBdHRhY2hQc2V1ZG9UcmFmZmljTGlnaHREZXRlY3Rv",
            "clJlcXVlc3QSVQoNY29uZmlndXJhdGlvbhgBIAEoCzI+LnNpbXVsYXRpb25f",
            "YXBpX3NjaGVtYS5Qc2V1ZG9UcmFmZmljTGlnaHREZXRlY3RvckNvbmZpZ3Vy",
            "YXRpb24iWQooQXR0YWNoUHNldWRvVHJhZmZpY0xpZ2h0RGV0ZWN0b3JSZXNw",
            "b25zZRItCgZyZXN1bHQYASABKAsyHS5zaW11bGF0aW9uX2FwaV9zY2hlbWEu",
            "UmVzdWx0IlwKGEF0dGFjaExpZGFyU2Vuc29yUmVxdWVzdBJACg1jb25maWd1",
            "cmF0aW9uGAEgASgLMikuc2ltdWxhdGlvbl9hcGlfc2NoZW1hLkxpZGFyQ29u",
            "ZmlndXJhdGlvbiJKChlBdHRhY2hMaWRhclNlbnNvclJlc3BvbnNlEi0KBnJl",
            "c3VsdBgBIAEoCzIdLnNpbXVsYXRpb25fYXBpX3NjaGVtYS5SZXN1bHQiagoc",
            "QXR0YWNoRGV0ZWN0aW9uU2Vuc29yUmVxdWVzdBJKCg1jb25maWd1cmF0aW9u",
            "GAEgASgLMjMuc2ltdWxhdGlvbl9hcGlfc2NoZW1hLkRldGVjdGlvblNlbnNv",
            "ckNvbmZpZ3VyYXRpb24iTgodQXR0YWNoRGV0ZWN0aW9uU2Vuc29yUmVzcG9u",
            "c2USLQoGcmVzdWx0GAEgASgLMh0uc2ltdWxhdGlvbl9hcGlfc2NoZW1hLlJl",
            "c3VsdCJyCiBBdHRhY2hPY2N1cGFuY3lHcmlkU2Vuc29yUmVxdWVzdBJOCg1j",
            "b25maWd1cmF0aW9uGAEgASgLMjcuc2ltdWxhdGlvbl9hcGlfc2NoZW1hLk9j",
            "Y3VwYW5jeUdyaWRTZW5zb3JDb25maWd1cmF0aW9uIlIKIUF0dGFjaE9jY3Vw",
            "YW5jeUdyaWRTZW5zb3JSZXNwb25zZRItCgZyZXN1bHQYASABKAsyHS5zaW11",
            "bGF0aW9uX2FwaV9zY2hlbWEuUmVzdWx0IqYECgxUcmFmZmljTGlnaHQSOAoF",
            "Y29sb3IYASABKA4yKS5zaW11bGF0aW9uX2FwaV9zY2hlbWEuVHJhZmZpY0xp",
            "Z2h0LkNvbG9yEjgKBXNoYXBlGAIgASgOMikuc2ltdWxhdGlvbl9hcGlfc2No",
            "ZW1hLlRyYWZmaWNMaWdodC5TaGFwZRI6CgZzdGF0dXMYAyABKA4yKi5zaW11",
            "bGF0aW9uX2FwaV9zY2hlbWEuVHJhZmZpY0xpZ2h0LlN0YXR1cxISCgpjb25m",
            "aWRlbmNlGAQgASgCIkQKBUNvbG9yEgcKA1JFRBAAEgkKBUFNQkVSEAESCQoF",
            "R1JFRU4QAhIJCgVXSElURRADEhEKDVVOS05PV05fQ09MT1IQBCLCAQoFU2hh",
            "cGUSCgoGQ0lSQ0xFEAASDgoKTEVGVF9BUlJPVxABEg8KC1JJR0hUX0FSUk9X",
            "EAISDAoIVVBfQVJST1cQAxIRCg1VUF9MRUZUX0FSUk9XEAQSEgoOVVBfUklH",
            "SFRfQVJST1cQBRIOCgpET1dOX0FSUk9XEAYSEwoPRE9XTl9MRUZUX0FSUk9X",
            "EAcSFAoQRE9XTl9SSUdIVF9BUlJPVxAIEgkKBUNST1NTEAkSEQoNVU5LTk9X",
            "Tl9TSEFQRRAKIkcKBlN0YXR1cxINCglTT0xJRF9PRkYQABIMCghTT0xJRF9P",
            "ThABEgwKCEZMQVNISU5HEAISEgoOVU5LTk9XTl9TVEFUVVMQAyJeCg1UcmFm",
            "ZmljU2lnbmFsEgoKAmlkGAEgASgFEkEKFHRyYWZmaWNfbGlnaHRfc3RhdHVz",
            "GAIgAygLMiMuc2ltdWxhdGlvbl9hcGlfc2NoZW1hLlRyYWZmaWNMaWdodCJS",
            "ChpVcGRhdGVUcmFmZmljTGlnaHRzUmVxdWVzdBI0CgZzdGF0ZXMYASADKAsy",
            "JC5zaW11bGF0aW9uX2FwaV9zY2hlbWEuVHJhZmZpY1NpZ25hbCJMChtVcGRh",
            "dGVUcmFmZmljTGlnaHRzUmVzcG9uc2USLQoGcmVzdWx0GAEgASgLMh0uc2lt",
            "dWxhdGlvbl9hcGlfc2NoZW1hLlJlc3VsdCJvCh9Gb2xsb3dQb2x5bGluZVRy",
            "YWplY3RvcnlSZXF1ZXN0EgwKBG5hbWUYASABKAkSPgoKdHJhamVjdG9yeRgC",
            "IAEoCzIqLnRyYWZmaWNfc2ltdWxhdG9yX21zZ3MuUG9seWxpbmVUcmFqZWN0",
            "b3J5IlEKIEZvbGxvd1BvbHlsaW5lVHJhamVjdG9yeVJlc3BvbnNlEi0KBnJl",
            "c3VsdBgBIAEoCzIdLnNpbXVsYXRpb25fYXBpX3NjaGVtYS5SZXN1bHQi6AgK",
            "EVNpbXVsYXRpb25SZXF1ZXN0Ej4KCmluaXRpYWxpemUYASABKAsyKC5zaW11",
            "bGF0aW9uX2FwaV9zY2hlbWEuSW5pdGlhbGl6ZVJlcXVlc3RIABJBCgx1cGRh",
            "dGVfZnJhbWUYAiABKAsyKS5zaW11bGF0aW9uX2FwaV9zY2hlbWEuVXBkYXRl",
            "RnJhbWVSZXF1ZXN0SAASUAoUc3Bhd25fdmVoaWNsZV9lbnRpdHkYAyABKAsy",
            "MC5zaW11bGF0aW9uX2FwaV9zY2hlbWEuU3Bhd25WZWhpY2xlRW50aXR5UmVx",
            "dWVzdEgAElYKF3NwYXduX3BlZGVzdHJpYW5fZW50aXR5GAQgASgLMjMuc2lt",
            "dWxhdGlvbl9hcGlfc2NoZW1hLlNwYXduUGVkZXN0cmlhbkVudGl0eVJlcXVl",
            "c3RIABJXChhzcGF3bl9taXNjX29iamVjdF9lbnRpdHkYBSABKAsyMy5zaW11",
            "bGF0aW9uX2FwaV9zY2hlbWEuU3Bhd25NaXNjT2JqZWN0RW50aXR5UmVxdWVz",
            "dEgAEkUKDmRlc3Bhd25fZW50aXR5GAYgASgLMisuc2ltdWxhdGlvbl9hcGlf",
            "c2NoZW1hLkRlc3Bhd25FbnRpdHlSZXF1ZXN0SAASUAoUdXBkYXRlX2VudGl0",
            "eV9zdGF0dXMYByABKAsyMC5zaW11bGF0aW9uX2FwaV9zY2hlbWEuVXBkYXRl",
            "RW50aXR5U3RhdHVzUmVxdWVzdEgAEk4KE2F0dGFjaF9saWRhcl9zZW5zb3IY",
            "CCABKAsyLy5zaW11bGF0aW9uX2FwaV9zY2hlbWEuQXR0YWNoTGlkYXJTZW5z",
            "b3JSZXF1ZXN0SAASVgoXYXR0YWNoX2RldGVjdGlvbl9zZW5zb3IYCSABKAsy",
            "My5zaW11bGF0aW9uX2FwaV9zY2hlbWEuQXR0YWNoRGV0ZWN0aW9uU2Vuc29y",
            "UmVxdWVzdEgAEl8KHGF0dGFjaF9vY2N1cGFuY3lfZ3JpZF9zZW5zb3IYCiAB",
            "KAsyNy5zaW11bGF0aW9uX2FwaV9zY2hlbWEuQXR0YWNoT2NjdXBhbmN5R3Jp",
            "ZFNlbnNvclJlcXVlc3RIABJSChV1cGRhdGVfdHJhZmZpY19saWdodHMYCyAB",
            "KAsyMS5zaW11bGF0aW9uX2FwaV9zY2hlbWEuVXBkYXRlVHJhZmZpY0xpZ2h0",
            "c1JlcXVlc3RIABJcChpmb2xsb3dfcG9seWxpbmVfdHJhamVjdG9yeRgMIAEo",
            "CzI2LnNpbXVsYXRpb25fYXBpX3NjaGVtYS5Gb2xsb3dQb2x5bGluZVRyYWpl",
            "Y3RvcnlSZXF1ZXN0SAASbgokYXR0YWNoX3BzZXVkb190cmFmZmljX2xpZ2h0",
            "X2RldGVjdG9yGA0gASgLMj4uc2ltdWxhdGlvbl9hcGlfc2NoZW1hLkF0dGFj",
            "aFBzZXVkb1RyYWZmaWNMaWdodERldGVjdG9yUmVxdWVzdEgAQgkKB3JlcXVl",
            "c3Qi9wgKElNpbXVsYXRpb25SZXNwb25zZRI/Cgppbml0aWFsaXplGAEgASgL",
            "Mikuc2ltdWxhdGlvbl9hcGlfc2NoZW1hLkluaXRpYWxpemVSZXNwb25zZUgA",
            "EkIKDHVwZGF0ZV9mcmFtZRgCIAEoCzIqLnNpbXVsYXRpb25fYXBpX3NjaGVt",
            "YS5VcGRhdGVGcmFtZVJlc3BvbnNlSAASUQoUc3Bhd25fdmVoaWNsZV9lbnRp",
            "dHkYAyABKAsyMS5zaW11bGF0aW9uX2FwaV9zY2hlbWEuU3Bhd25WZWhpY2xl",
            "RW50aXR5UmVzcG9uc2VIABJXChdzcGF3bl9wZWRlc3RyaWFuX2VudGl0eRgE",
            "IAEoCzI0LnNpbXVsYXRpb25fYXBpX3NjaGVtYS5TcGF3blBlZGVzdHJpYW5F",
            "bnRpdHlSZXNwb25zZUgAElgKGHNwYXduX21pc2Nfb2JqZWN0X2VudGl0eRgF",
            "IAEoCzI0LnNpbXVsYXRpb25fYXBpX3NjaGVtYS5TcGF3bk1pc2NPYmplY3RF",
            "bnRpdHlSZXNwb25zZUgAEkYKDmRlc3Bhd25fZW50aXR5GAYgASgLMiwuc2lt",
            "dWxhdGlvbl9hcGlfc2NoZW1hLkRlc3Bhd25FbnRpdHlSZXNwb25zZUgAElEK",
            "FHVwZGF0ZV9lbnRpdHlfc3RhdHVzGAcgASgLMjEuc2ltdWxhdGlvbl9hcGlf",
            "c2NoZW1hLlVwZGF0ZUVudGl0eVN0YXR1c1Jlc3BvbnNlSAASTwoTYXR0YWNo",
            "X2xpZGFyX3NlbnNvchgIIAEoCzIwLnNpbXVsYXRpb25fYXBpX3NjaGVtYS5B",
            "dHRhY2hMaWRhclNlbnNvclJlc3BvbnNlSAASVwoXYXR0YWNoX2RldGVjdGlv",
            "bl9zZW5zb3IYCSABKAsyNC5zaW11bGF0aW9uX2FwaV9zY2hlbWEuQXR0YWNo",
            "RGV0ZWN0aW9uU2Vuc29yUmVzcG9uc2VIABJgChxhdHRhY2hfb2NjdXBhbmN5",
            "X2dyaWRfc2Vuc29yGAogASgLMjguc2ltdWxhdGlvbl9hcGlfc2NoZW1hLkF0",
            "dGFjaE9jY3VwYW5jeUdyaWRTZW5zb3JSZXNwb25zZUgAElMKFXVwZGF0ZV90",
            "cmFmZmljX2xpZ2h0cxgLIAEoCzIyLnNpbXVsYXRpb25fYXBpX3NjaGVtYS5V",
            "cGRhdGVUcmFmZmljTGlnaHRzUmVzcG9uc2VIABJdChpmb2xsb3dfcG9seWxp",
            "bmVfdHJhamVjdG9yeRgMIAEoCzI3LnNpbXVsYXRpb25fYXBpX3NjaGVtYS5G",
            "b2xsb3dQb2x5bGluZVRyYWplY3RvcnlSZXNwb25zZUgAEm8KJGF0dGFjaF9w",
            "c2V1ZG9fdHJhZmZpY19saWdodF9kZXRlY3RvchgNIAEoCzI/LnNpbXVsYXRp",
            "b25fYXBpX3NjaGVtYS5BdHRhY2hQc2V1ZG9UcmFmZmljTGlnaHREZXRlY3Rv",
            "clJlc3BvbnNlSABCCgoIcmVzcG9uc2ViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::BuiltinInterfaces.BuiltinInterfacesReflection.Descriptor, global::GeometryMsgs.GeometryMsgsReflection.Descriptor, global::TrafficSimulatorMsgs.TrafficSimulatorMsgsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SimulationApiSchema.EntityStatus), global::SimulationApiSchema.EntityStatus.Parser, new[]{ "Type", "Subtype", "Time", "Name", "ActionStatus", "Pose" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SimulationApiSchema.Result), global::SimulationApiSchema.Result.Parser, new[]{ "Success", "Description" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SimulationApiSchema.PseudoTrafficLightDetectorConfiguration), global::SimulationApiSchema.PseudoTrafficLightDetectorConfiguration.Parser, new[]{ "ArchitectureType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SimulationApiSchema.LidarConfiguration), global::SimulationApiSchema.LidarConfiguration.Parser, new[]{ "Entity", "HorizontalResolution", "VerticalAngles", "ScanDuration", "ArchitectureType", "LidarSensorDelay" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SimulationApiSchema.DetectionSensorConfiguration), global::SimulationApiSchema.DetectionSensorConfiguration.Parser, new[]{ "Entity", "UpdateDuration", "Range", "ArchitectureType", "DetectAllObjectsInRange", "PosNoiseStddev", "RandomSeed", "ProbabilityOfLost", "ObjectRecognitionDelay", "ObjectRecognitionGroundTruthDelay" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SimulationApiSchema.OccupancyGridSensorConfiguration), global::SimulationApiSchema.OccupancyGridSensorConfiguration.Parser, new[]{ "Entity", "UpdateDuration", "Resolution", "Width", "Height", "ArchitectureType", "Range", "FilterByRange" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SimulationApiSchema.UpdatedEntityStatus), global::SimulationApiSchema.UpdatedEntityStatus.Parser, new[]{ "Name", "ActionStatus", "Pose" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SimulationApiSchema.InitializeRequest), global::SimulationApiSchema.InitializeRequest.Parser, new[]{ "RealtimeFactor", "StepTime", "InitializeTime", "InitializeRosTime", "Lanelet2MapPath" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SimulationApiSchema.InitializeResponse), global::SimulationApiSchema.InitializeResponse.Parser, new[]{ "Result" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SimulationApiSchema.UpdateFrameRequest), global::SimulationApiSchema.UpdateFrameRequest.Parser, new[]{ "CurrentSimulationTime", "CurrentScenarioTime", "CurrentRosTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SimulationApiSchema.UpdateFrameResponse), global::SimulationApiSchema.UpdateFrameResponse.Parser, new[]{ "Result" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SimulationApiSchema.SpawnVehicleEntityRequest), global::SimulationApiSchema.SpawnVehicleEntityRequest.Parser, new[]{ "Parameters", "IsEgo", "AssetKey", "Pose", "InitialSpeed" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SimulationApiSchema.SpawnVehicleEntityResponse), global::SimulationApiSchema.SpawnVehicleEntityResponse.Parser, new[]{ "Result" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SimulationApiSchema.SpawnPedestrianEntityRequest), global::SimulationApiSchema.SpawnPedestrianEntityRequest.Parser, new[]{ "Parameters", "AssetKey", "Pose" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SimulationApiSchema.SpawnPedestrianEntityResponse), global::SimulationApiSchema.SpawnPedestrianEntityResponse.Parser, new[]{ "Result" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SimulationApiSchema.SpawnMiscObjectEntityRequest), global::SimulationApiSchema.SpawnMiscObjectEntityRequest.Parser, new[]{ "Parameters", "AssetKey", "Pose" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SimulationApiSchema.SpawnMiscObjectEntityResponse), global::SimulationApiSchema.SpawnMiscObjectEntityResponse.Parser, new[]{ "Result" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SimulationApiSchema.DespawnEntityRequest), global::SimulationApiSchema.DespawnEntityRequest.Parser, new[]{ "Name" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SimulationApiSchema.DespawnEntityResponse), global::SimulationApiSchema.DespawnEntityResponse.Parser, new[]{ "Result" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SimulationApiSchema.UpdateEntityStatusRequest), global::SimulationApiSchema.UpdateEntityStatusRequest.Parser, new[]{ "Status", "NpcLogicStarted" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SimulationApiSchema.UpdateEntityStatusResponse), global::SimulationApiSchema.UpdateEntityStatusResponse.Parser, new[]{ "Result", "Status" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SimulationApiSchema.AttachPseudoTrafficLightDetectorRequest), global::SimulationApiSchema.AttachPseudoTrafficLightDetectorRequest.Parser, new[]{ "Configuration" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SimulationApiSchema.AttachPseudoTrafficLightDetectorResponse), global::SimulationApiSchema.AttachPseudoTrafficLightDetectorResponse.Parser, new[]{ "Result" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SimulationApiSchema.AttachLidarSensorRequest), global::SimulationApiSchema.AttachLidarSensorRequest.Parser, new[]{ "Configuration" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SimulationApiSchema.AttachLidarSensorResponse), global::SimulationApiSchema.AttachLidarSensorResponse.Parser, new[]{ "Result" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SimulationApiSchema.AttachDetectionSensorRequest), global::SimulationApiSchema.AttachDetectionSensorRequest.Parser, new[]{ "Configuration" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SimulationApiSchema.AttachDetectionSensorResponse), global::SimulationApiSchema.AttachDetectionSensorResponse.Parser, new[]{ "Result" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SimulationApiSchema.AttachOccupancyGridSensorRequest), global::SimulationApiSchema.AttachOccupancyGridSensorRequest.Parser, new[]{ "Configuration" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SimulationApiSchema.AttachOccupancyGridSensorResponse), global::SimulationApiSchema.AttachOccupancyGridSensorResponse.Parser, new[]{ "Result" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SimulationApiSchema.TrafficLight), global::SimulationApiSchema.TrafficLight.Parser, new[]{ "Color", "Shape", "Status", "Confidence" }, null, new[]{ typeof(global::SimulationApiSchema.TrafficLight.Types.Color), typeof(global::SimulationApiSchema.TrafficLight.Types.Shape), typeof(global::SimulationApiSchema.TrafficLight.Types.Status) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SimulationApiSchema.TrafficSignal), global::SimulationApiSchema.TrafficSignal.Parser, new[]{ "Id", "TrafficLightStatus" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SimulationApiSchema.UpdateTrafficLightsRequest), global::SimulationApiSchema.UpdateTrafficLightsRequest.Parser, new[]{ "States" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SimulationApiSchema.UpdateTrafficLightsResponse), global::SimulationApiSchema.UpdateTrafficLightsResponse.Parser, new[]{ "Result" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SimulationApiSchema.FollowPolylineTrajectoryRequest), global::SimulationApiSchema.FollowPolylineTrajectoryRequest.Parser, new[]{ "Name", "Trajectory" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SimulationApiSchema.FollowPolylineTrajectoryResponse), global::SimulationApiSchema.FollowPolylineTrajectoryResponse.Parser, new[]{ "Result" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SimulationApiSchema.SimulationRequest), global::SimulationApiSchema.SimulationRequest.Parser, new[]{ "Initialize", "UpdateFrame", "SpawnVehicleEntity", "SpawnPedestrianEntity", "SpawnMiscObjectEntity", "DespawnEntity", "UpdateEntityStatus", "AttachLidarSensor", "AttachDetectionSensor", "AttachOccupancyGridSensor", "UpdateTrafficLights", "FollowPolylineTrajectory", "AttachPseudoTrafficLightDetector" }, new[]{ "Request" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SimulationApiSchema.SimulationResponse), global::SimulationApiSchema.SimulationResponse.Parser, new[]{ "Initialize", "UpdateFrame", "SpawnVehicleEntity", "SpawnPedestrianEntity", "SpawnMiscObjectEntity", "DespawnEntity", "UpdateEntityStatus", "AttachLidarSensor", "AttachDetectionSensor", "AttachOccupancyGridSensor", "UpdateTrafficLights", "FollowPolylineTrajectory", "AttachPseudoTrafficLightDetector" }, new[]{ "Response" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///*
  /// Entity status passed over the protobuf interface
  /// </summary>
  public sealed partial class EntityStatus : pb::IMessage<EntityStatus> {
    private static readonly pb::MessageParser<EntityStatus> _parser = new pb::MessageParser<EntityStatus>(() => new EntityStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EntityStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SimulationApiSchema.SimulationApiSchemaReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityStatus(EntityStatus other) : this() {
      type_ = other.type_ != null ? other.type_.Clone() : null;
      subtype_ = other.subtype_ != null ? other.subtype_.Clone() : null;
      time_ = other.time_;
      name_ = other.name_;
      actionStatus_ = other.actionStatus_ != null ? other.actionStatus_.Clone() : null;
      pose_ = other.pose_ != null ? other.pose_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityStatus Clone() {
      return new EntityStatus(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::TrafficSimulatorMsgs.EntityType type_;
    /// <summary>
    /// Type of the entity.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TrafficSimulatorMsgs.EntityType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "subtype" field.</summary>
    public const int SubtypeFieldNumber = 2;
    private global::TrafficSimulatorMsgs.EntitySubtype subtype_;
    /// <summary>
    /// subtype of the entity.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TrafficSimulatorMsgs.EntitySubtype Subtype {
      get { return subtype_; }
      set {
        subtype_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 3;
    private double time_;
    /// <summary>
    /// Current simulation time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private string name_ = "";
    /// <summary>
    /// Name of the entity.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "action_status" field.</summary>
    public const int ActionStatusFieldNumber = 5;
    private global::TrafficSimulatorMsgs.ActionStatus actionStatus_;
    /// <summary>
    /// Action status of the entity.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TrafficSimulatorMsgs.ActionStatus ActionStatus {
      get { return actionStatus_; }
      set {
        actionStatus_ = value;
      }
    }

    /// <summary>Field number for the "pose" field.</summary>
    public const int PoseFieldNumber = 6;
    private global::GeometryMsgs.Pose pose_;
    /// <summary>
    /// Pose in map coordinate of the entity.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GeometryMsgs.Pose Pose {
      get { return pose_; }
      set {
        pose_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EntityStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EntityStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Type, other.Type)) return false;
      if (!object.Equals(Subtype, other.Subtype)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Time, other.Time)) return false;
      if (Name != other.Name) return false;
      if (!object.Equals(ActionStatus, other.ActionStatus)) return false;
      if (!object.Equals(Pose, other.Pose)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (type_ != null) hash ^= Type.GetHashCode();
      if (subtype_ != null) hash ^= Subtype.GetHashCode();
      if (Time != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Time);
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (actionStatus_ != null) hash ^= ActionStatus.GetHashCode();
      if (pose_ != null) hash ^= Pose.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (type_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Type);
      }
      if (subtype_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Subtype);
      }
      if (Time != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Time);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (actionStatus_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ActionStatus);
      }
      if (pose_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Pose);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (type_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Type);
      }
      if (subtype_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Subtype);
      }
      if (Time != 0D) {
        size += 1 + 8;
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (actionStatus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ActionStatus);
      }
      if (pose_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pose);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EntityStatus other) {
      if (other == null) {
        return;
      }
      if (other.type_ != null) {
        if (type_ == null) {
          Type = new global::TrafficSimulatorMsgs.EntityType();
        }
        Type.MergeFrom(other.Type);
      }
      if (other.subtype_ != null) {
        if (subtype_ == null) {
          Subtype = new global::TrafficSimulatorMsgs.EntitySubtype();
        }
        Subtype.MergeFrom(other.Subtype);
      }
      if (other.Time != 0D) {
        Time = other.Time;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.actionStatus_ != null) {
        if (actionStatus_ == null) {
          ActionStatus = new global::TrafficSimulatorMsgs.ActionStatus();
        }
        ActionStatus.MergeFrom(other.ActionStatus);
      }
      if (other.pose_ != null) {
        if (pose_ == null) {
          Pose = new global::GeometryMsgs.Pose();
        }
        Pose.MergeFrom(other.Pose);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (type_ == null) {
              Type = new global::TrafficSimulatorMsgs.EntityType();
            }
            input.ReadMessage(Type);
            break;
          }
          case 18: {
            if (subtype_ == null) {
              Subtype = new global::TrafficSimulatorMsgs.EntitySubtype();
            }
            input.ReadMessage(Subtype);
            break;
          }
          case 25: {
            Time = input.ReadDouble();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 42: {
            if (actionStatus_ == null) {
              ActionStatus = new global::TrafficSimulatorMsgs.ActionStatus();
            }
            input.ReadMessage(ActionStatus);
            break;
          }
          case 50: {
            if (pose_ == null) {
              Pose = new global::GeometryMsgs.Pose();
            }
            input.ReadMessage(Pose);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// Result of the request
  /// </summary>
  public sealed partial class Result : pb::IMessage<Result> {
    private static readonly pb::MessageParser<Result> _parser = new pb::MessageParser<Result>(() => new Result());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Result> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SimulationApiSchema.SimulationApiSchemaReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Result() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Result(Result other) : this() {
      success_ = other.success_;
      description_ = other.description_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Result Clone() {
      return new Result(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    /// <summary>
    /// If true, the request was succeeded
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 2;
    private string description_ = "";
    /// <summary>
    /// Description of why the request was failed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Result);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Result other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (Description != other.Description) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Description);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Result other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            Description = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// Parameter configuration of the traffic light detector emulator
  /// </summary>
  public sealed partial class PseudoTrafficLightDetectorConfiguration : pb::IMessage<PseudoTrafficLightDetectorConfiguration> {
    private static readonly pb::MessageParser<PseudoTrafficLightDetectorConfiguration> _parser = new pb::MessageParser<PseudoTrafficLightDetectorConfiguration>(() => new PseudoTrafficLightDetectorConfiguration());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PseudoTrafficLightDetectorConfiguration> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SimulationApiSchema.SimulationApiSchemaReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PseudoTrafficLightDetectorConfiguration() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PseudoTrafficLightDetectorConfiguration(PseudoTrafficLightDetectorConfiguration other) : this() {
      architectureType_ = other.architectureType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PseudoTrafficLightDetectorConfiguration Clone() {
      return new PseudoTrafficLightDetectorConfiguration(this);
    }

    /// <summary>Field number for the "architecture_type" field.</summary>
    public const int ArchitectureTypeFieldNumber = 1;
    private string architectureType_ = "";
    /// <summary>
    /// Autoware architecture type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ArchitectureType {
      get { return architectureType_; }
      set {
        architectureType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PseudoTrafficLightDetectorConfiguration);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PseudoTrafficLightDetectorConfiguration other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ArchitectureType != other.ArchitectureType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ArchitectureType.Length != 0) hash ^= ArchitectureType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ArchitectureType.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ArchitectureType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ArchitectureType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ArchitectureType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PseudoTrafficLightDetectorConfiguration other) {
      if (other == null) {
        return;
      }
      if (other.ArchitectureType.Length != 0) {
        ArchitectureType = other.ArchitectureType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ArchitectureType = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// Parameter configuration of the lidar sensor
  /// </summary>
  public sealed partial class LidarConfiguration : pb::IMessage<LidarConfiguration> {
    private static readonly pb::MessageParser<LidarConfiguration> _parser = new pb::MessageParser<LidarConfiguration>(() => new LidarConfiguration());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LidarConfiguration> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SimulationApiSchema.SimulationApiSchemaReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LidarConfiguration() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LidarConfiguration(LidarConfiguration other) : this() {
      entity_ = other.entity_;
      horizontalResolution_ = other.horizontalResolution_;
      verticalAngles_ = other.verticalAngles_.Clone();
      scanDuration_ = other.scanDuration_;
      architectureType_ = other.architectureType_;
      lidarSensorDelay_ = other.lidarSensorDelay_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LidarConfiguration Clone() {
      return new LidarConfiguration(this);
    }

    /// <summary>Field number for the "entity" field.</summary>
    public const int EntityFieldNumber = 1;
    private string entity_ = "";
    /// <summary>
    /// Name of the entity which you want to attach lidar.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Entity {
      get { return entity_; }
      set {
        entity_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "horizontal_resolution" field.</summary>
    public const int HorizontalResolutionFieldNumber = 2;
    private double horizontalResolution_;
    /// <summary>
    /// Horizontal resolutions of the lidar. (unit : radian)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double HorizontalResolution {
      get { return horizontalResolution_; }
      set {
        horizontalResolution_ = value;
      }
    }

    /// <summary>Field number for the "vertical_angles" field.</summary>
    public const int VerticalAnglesFieldNumber = 3;
    private static readonly pb::FieldCodec<double> _repeated_verticalAngles_codec
        = pb::FieldCodec.ForDouble(26);
    private readonly pbc::RepeatedField<double> verticalAngles_ = new pbc::RepeatedField<double>();
    /// <summary>
    /// Vertical resolutions of the lidar. (unit : radian)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> VerticalAngles {
      get { return verticalAngles_; }
    }

    /// <summary>Field number for the "scan_duration" field.</summary>
    public const int ScanDurationFieldNumber = 4;
    private double scanDuration_;
    /// <summary>
    /// Scan duration of the lidar. (unit: second)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ScanDuration {
      get { return scanDuration_; }
      set {
        scanDuration_ = value;
      }
    }

    /// <summary>Field number for the "architecture_type" field.</summary>
    public const int ArchitectureTypeFieldNumber = 5;
    private string architectureType_ = "";
    /// <summary>
    /// Autoware architecture type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ArchitectureType {
      get { return architectureType_; }
      set {
        architectureType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lidar_sensor_delay" field.</summary>
    public const int LidarSensorDelayFieldNumber = 6;
    private double lidarSensorDelay_;
    /// <summary>
    /// lidar sensor delay. (unit : second) It delays publishing timing.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LidarSensorDelay {
      get { return lidarSensorDelay_; }
      set {
        lidarSensorDelay_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LidarConfiguration);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LidarConfiguration other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Entity != other.Entity) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(HorizontalResolution, other.HorizontalResolution)) return false;
      if(!verticalAngles_.Equals(other.verticalAngles_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ScanDuration, other.ScanDuration)) return false;
      if (ArchitectureType != other.ArchitectureType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LidarSensorDelay, other.LidarSensorDelay)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Entity.Length != 0) hash ^= Entity.GetHashCode();
      if (HorizontalResolution != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(HorizontalResolution);
      hash ^= verticalAngles_.GetHashCode();
      if (ScanDuration != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ScanDuration);
      if (ArchitectureType.Length != 0) hash ^= ArchitectureType.GetHashCode();
      if (LidarSensorDelay != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LidarSensorDelay);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Entity.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Entity);
      }
      if (HorizontalResolution != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(HorizontalResolution);
      }
      verticalAngles_.WriteTo(output, _repeated_verticalAngles_codec);
      if (ScanDuration != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(ScanDuration);
      }
      if (ArchitectureType.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ArchitectureType);
      }
      if (LidarSensorDelay != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(LidarSensorDelay);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Entity.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Entity);
      }
      if (HorizontalResolution != 0D) {
        size += 1 + 8;
      }
      size += verticalAngles_.CalculateSize(_repeated_verticalAngles_codec);
      if (ScanDuration != 0D) {
        size += 1 + 8;
      }
      if (ArchitectureType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ArchitectureType);
      }
      if (LidarSensorDelay != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LidarConfiguration other) {
      if (other == null) {
        return;
      }
      if (other.Entity.Length != 0) {
        Entity = other.Entity;
      }
      if (other.HorizontalResolution != 0D) {
        HorizontalResolution = other.HorizontalResolution;
      }
      verticalAngles_.Add(other.verticalAngles_);
      if (other.ScanDuration != 0D) {
        ScanDuration = other.ScanDuration;
      }
      if (other.ArchitectureType.Length != 0) {
        ArchitectureType = other.ArchitectureType;
      }
      if (other.LidarSensorDelay != 0D) {
        LidarSensorDelay = other.LidarSensorDelay;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Entity = input.ReadString();
            break;
          }
          case 17: {
            HorizontalResolution = input.ReadDouble();
            break;
          }
          case 26:
          case 25: {
            verticalAngles_.AddEntriesFrom(input, _repeated_verticalAngles_codec);
            break;
          }
          case 33: {
            ScanDuration = input.ReadDouble();
            break;
          }
          case 42: {
            ArchitectureType = input.ReadString();
            break;
          }
          case 49: {
            LidarSensorDelay = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// Parameter configuration of the detection sensor
  /// </summary>
  public sealed partial class DetectionSensorConfiguration : pb::IMessage<DetectionSensorConfiguration> {
    private static readonly pb::MessageParser<DetectionSensorConfiguration> _parser = new pb::MessageParser<DetectionSensorConfiguration>(() => new DetectionSensorConfiguration());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DetectionSensorConfiguration> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SimulationApiSchema.SimulationApiSchemaReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DetectionSensorConfiguration() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DetectionSensorConfiguration(DetectionSensorConfiguration other) : this() {
      entity_ = other.entity_;
      updateDuration_ = other.updateDuration_;
      range_ = other.range_;
      architectureType_ = other.architectureType_;
      detectAllObjectsInRange_ = other.detectAllObjectsInRange_;
      posNoiseStddev_ = other.posNoiseStddev_;
      randomSeed_ = other.randomSeed_;
      probabilityOfLost_ = other.probabilityOfLost_;
      objectRecognitionDelay_ = other.objectRecognitionDelay_;
      objectRecognitionGroundTruthDelay_ = other.objectRecognitionGroundTruthDelay_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DetectionSensorConfiguration Clone() {
      return new DetectionSensorConfiguration(this);
    }

    /// <summary>Field number for the "entity" field.</summary>
    public const int EntityFieldNumber = 1;
    private string entity_ = "";
    /// <summary>
    /// Name of the entity which you want to attach detection sensor.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Entity {
      get { return entity_; }
      set {
        entity_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "update_duration" field.</summary>
    public const int UpdateDurationFieldNumber = 2;
    private double updateDuration_;
    /// <summary>
    /// Update duration of the detection sensor. (unit : second)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double UpdateDuration {
      get { return updateDuration_; }
      set {
        updateDuration_ = value;
      }
    }

    /// <summary>Field number for the "range" field.</summary>
    public const int RangeFieldNumber = 3;
    private double range_;
    /// <summary>
    /// Sensor detection range. (unit : meter)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Range {
      get { return range_; }
      set {
        range_ = value;
      }
    }

    /// <summary>Field number for the "architecture_type" field.</summary>
    public const int ArchitectureTypeFieldNumber = 4;
    private string architectureType_ = "";
    /// <summary>
    /// Autoware architecture type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ArchitectureType {
      get { return architectureType_; }
      set {
        architectureType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "detect_all_objects_in_range" field.</summary>
    public const int DetectAllObjectsInRangeFieldNumber = 5;
    private bool detectAllObjectsInRange_;
    /// <summary>
    /// If false, simulator publish detection result only lidar ray was hit. If true, simulator publish detection result of entities in range.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DetectAllObjectsInRange {
      get { return detectAllObjectsInRange_; }
      set {
        detectAllObjectsInRange_ = value;
      }
    }

    /// <summary>Field number for the "pos_noise_stddev" field.</summary>
    public const int PosNoiseStddevFieldNumber = 6;
    private double posNoiseStddev_;
    /// <summary>
    /// standard deviation of position noise.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PosNoiseStddev {
      get { return posNoiseStddev_; }
      set {
        posNoiseStddev_ = value;
      }
    }

    /// <summary>Field number for the "random_seed" field.</summary>
    public const int RandomSeedFieldNumber = 7;
    private int randomSeed_;
    /// <summary>
    /// random_seed for noise generation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RandomSeed {
      get { return randomSeed_; }
      set {
        randomSeed_ = value;
      }
    }

    /// <summary>Field number for the "probability_of_lost" field.</summary>
    public const int ProbabilityOfLostFieldNumber = 8;
    private double probabilityOfLost_;
    /// <summary>
    /// probability of lost recognition. (0.0 ~ 1.0)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ProbabilityOfLost {
      get { return probabilityOfLost_; }
      set {
        probabilityOfLost_ = value;
      }
    }

    /// <summary>Field number for the "object_recognition_delay" field.</summary>
    public const int ObjectRecognitionDelayFieldNumber = 9;
    private double objectRecognitionDelay_;
    /// <summary>
    /// object recognition delay. (unit : second) It delays only the position recognition.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ObjectRecognitionDelay {
      get { return objectRecognitionDelay_; }
      set {
        objectRecognitionDelay_ = value;
      }
    }

    /// <summary>Field number for the "object_recognition_ground_truth_delay" field.</summary>
    public const int ObjectRecognitionGroundTruthDelayFieldNumber = 10;
    private double objectRecognitionGroundTruthDelay_;
    /// <summary>
    /// object recognition ground truth delay. (unit : second) It delays only the position recognition.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ObjectRecognitionGroundTruthDelay {
      get { return objectRecognitionGroundTruthDelay_; }
      set {
        objectRecognitionGroundTruthDelay_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DetectionSensorConfiguration);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DetectionSensorConfiguration other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Entity != other.Entity) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UpdateDuration, other.UpdateDuration)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Range, other.Range)) return false;
      if (ArchitectureType != other.ArchitectureType) return false;
      if (DetectAllObjectsInRange != other.DetectAllObjectsInRange) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PosNoiseStddev, other.PosNoiseStddev)) return false;
      if (RandomSeed != other.RandomSeed) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ProbabilityOfLost, other.ProbabilityOfLost)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ObjectRecognitionDelay, other.ObjectRecognitionDelay)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ObjectRecognitionGroundTruthDelay, other.ObjectRecognitionGroundTruthDelay)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Entity.Length != 0) hash ^= Entity.GetHashCode();
      if (UpdateDuration != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UpdateDuration);
      if (Range != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Range);
      if (ArchitectureType.Length != 0) hash ^= ArchitectureType.GetHashCode();
      if (DetectAllObjectsInRange != false) hash ^= DetectAllObjectsInRange.GetHashCode();
      if (PosNoiseStddev != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PosNoiseStddev);
      if (RandomSeed != 0) hash ^= RandomSeed.GetHashCode();
      if (ProbabilityOfLost != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ProbabilityOfLost);
      if (ObjectRecognitionDelay != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ObjectRecognitionDelay);
      if (ObjectRecognitionGroundTruthDelay != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ObjectRecognitionGroundTruthDelay);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Entity.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Entity);
      }
      if (UpdateDuration != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(UpdateDuration);
      }
      if (Range != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Range);
      }
      if (ArchitectureType.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ArchitectureType);
      }
      if (DetectAllObjectsInRange != false) {
        output.WriteRawTag(40);
        output.WriteBool(DetectAllObjectsInRange);
      }
      if (PosNoiseStddev != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(PosNoiseStddev);
      }
      if (RandomSeed != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(RandomSeed);
      }
      if (ProbabilityOfLost != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(ProbabilityOfLost);
      }
      if (ObjectRecognitionDelay != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(ObjectRecognitionDelay);
      }
      if (ObjectRecognitionGroundTruthDelay != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(ObjectRecognitionGroundTruthDelay);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Entity.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Entity);
      }
      if (UpdateDuration != 0D) {
        size += 1 + 8;
      }
      if (Range != 0D) {
        size += 1 + 8;
      }
      if (ArchitectureType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ArchitectureType);
      }
      if (DetectAllObjectsInRange != false) {
        size += 1 + 1;
      }
      if (PosNoiseStddev != 0D) {
        size += 1 + 8;
      }
      if (RandomSeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RandomSeed);
      }
      if (ProbabilityOfLost != 0D) {
        size += 1 + 8;
      }
      if (ObjectRecognitionDelay != 0D) {
        size += 1 + 8;
      }
      if (ObjectRecognitionGroundTruthDelay != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DetectionSensorConfiguration other) {
      if (other == null) {
        return;
      }
      if (other.Entity.Length != 0) {
        Entity = other.Entity;
      }
      if (other.UpdateDuration != 0D) {
        UpdateDuration = other.UpdateDuration;
      }
      if (other.Range != 0D) {
        Range = other.Range;
      }
      if (other.ArchitectureType.Length != 0) {
        ArchitectureType = other.ArchitectureType;
      }
      if (other.DetectAllObjectsInRange != false) {
        DetectAllObjectsInRange = other.DetectAllObjectsInRange;
      }
      if (other.PosNoiseStddev != 0D) {
        PosNoiseStddev = other.PosNoiseStddev;
      }
      if (other.RandomSeed != 0) {
        RandomSeed = other.RandomSeed;
      }
      if (other.ProbabilityOfLost != 0D) {
        ProbabilityOfLost = other.ProbabilityOfLost;
      }
      if (other.ObjectRecognitionDelay != 0D) {
        ObjectRecognitionDelay = other.ObjectRecognitionDelay;
      }
      if (other.ObjectRecognitionGroundTruthDelay != 0D) {
        ObjectRecognitionGroundTruthDelay = other.ObjectRecognitionGroundTruthDelay;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Entity = input.ReadString();
            break;
          }
          case 17: {
            UpdateDuration = input.ReadDouble();
            break;
          }
          case 25: {
            Range = input.ReadDouble();
            break;
          }
          case 34: {
            ArchitectureType = input.ReadString();
            break;
          }
          case 40: {
            DetectAllObjectsInRange = input.ReadBool();
            break;
          }
          case 49: {
            PosNoiseStddev = input.ReadDouble();
            break;
          }
          case 56: {
            RandomSeed = input.ReadInt32();
            break;
          }
          case 65: {
            ProbabilityOfLost = input.ReadDouble();
            break;
          }
          case 73: {
            ObjectRecognitionDelay = input.ReadDouble();
            break;
          }
          case 81: {
            ObjectRecognitionGroundTruthDelay = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// Parameter configuration of the occupancy grid sensor
  /// </summary>
  public sealed partial class OccupancyGridSensorConfiguration : pb::IMessage<OccupancyGridSensorConfiguration> {
    private static readonly pb::MessageParser<OccupancyGridSensorConfiguration> _parser = new pb::MessageParser<OccupancyGridSensorConfiguration>(() => new OccupancyGridSensorConfiguration());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OccupancyGridSensorConfiguration> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SimulationApiSchema.SimulationApiSchemaReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OccupancyGridSensorConfiguration() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OccupancyGridSensorConfiguration(OccupancyGridSensorConfiguration other) : this() {
      entity_ = other.entity_;
      updateDuration_ = other.updateDuration_;
      resolution_ = other.resolution_;
      width_ = other.width_;
      height_ = other.height_;
      architectureType_ = other.architectureType_;
      range_ = other.range_;
      filterByRange_ = other.filterByRange_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OccupancyGridSensorConfiguration Clone() {
      return new OccupancyGridSensorConfiguration(this);
    }

    /// <summary>Field number for the "entity" field.</summary>
    public const int EntityFieldNumber = 1;
    private string entity_ = "";
    /// <summary>
    /// Name of the entity which you want to attach detection sensor.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Entity {
      get { return entity_; }
      set {
        entity_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "update_duration" field.</summary>
    public const int UpdateDurationFieldNumber = 2;
    private double updateDuration_;
    /// <summary>
    /// Update duration of the detection sensor. (unit : second)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double UpdateDuration {
      get { return updateDuration_; }
      set {
        updateDuration_ = value;
      }
    }

    /// <summary>Field number for the "resolution" field.</summary>
    public const int ResolutionFieldNumber = 3;
    private double resolution_;
    /// <summary>
    /// Resolution of the occupancy grid. (unit : meter)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Resolution {
      get { return resolution_; }
      set {
        resolution_ = value;
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 4;
    private uint width_;
    /// <summary>
    /// Width of the occupancy grid. (unit : pixel)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 5;
    private uint height_;
    /// <summary>
    /// Height of the occupancy grid. (unit : pixel)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "architecture_type" field.</summary>
    public const int ArchitectureTypeFieldNumber = 6;
    private string architectureType_ = "";
    /// <summary>
    /// Autoware architecture type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ArchitectureType {
      get { return architectureType_; }
      set {
        architectureType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "range" field.</summary>
    public const int RangeFieldNumber = 7;
    private double range_;
    /// <summary>
    /// Sensor detection range. (unit : meter)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Range {
      get { return range_; }
      set {
        range_ = value;
      }
    }

    /// <summary>Field number for the "filter_by_range" field.</summary>
    public const int FilterByRangeFieldNumber = 8;
    private bool filterByRange_;
    /// <summary>
    /// If false, simulator publish detection result only lidar ray was hit. If true, simulator publish detection result of entities in range.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FilterByRange {
      get { return filterByRange_; }
      set {
        filterByRange_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OccupancyGridSensorConfiguration);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OccupancyGridSensorConfiguration other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Entity != other.Entity) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UpdateDuration, other.UpdateDuration)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Resolution, other.Resolution)) return false;
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      if (ArchitectureType != other.ArchitectureType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Range, other.Range)) return false;
      if (FilterByRange != other.FilterByRange) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Entity.Length != 0) hash ^= Entity.GetHashCode();
      if (UpdateDuration != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UpdateDuration);
      if (Resolution != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Resolution);
      if (Width != 0) hash ^= Width.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      if (ArchitectureType.Length != 0) hash ^= ArchitectureType.GetHashCode();
      if (Range != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Range);
      if (FilterByRange != false) hash ^= FilterByRange.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Entity.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Entity);
      }
      if (UpdateDuration != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(UpdateDuration);
      }
      if (Resolution != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Resolution);
      }
      if (Width != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Width);
      }
      if (Height != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Height);
      }
      if (ArchitectureType.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ArchitectureType);
      }
      if (Range != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(Range);
      }
      if (FilterByRange != false) {
        output.WriteRawTag(64);
        output.WriteBool(FilterByRange);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Entity.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Entity);
      }
      if (UpdateDuration != 0D) {
        size += 1 + 8;
      }
      if (Resolution != 0D) {
        size += 1 + 8;
      }
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Width);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Height);
      }
      if (ArchitectureType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ArchitectureType);
      }
      if (Range != 0D) {
        size += 1 + 8;
      }
      if (FilterByRange != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OccupancyGridSensorConfiguration other) {
      if (other == null) {
        return;
      }
      if (other.Entity.Length != 0) {
        Entity = other.Entity;
      }
      if (other.UpdateDuration != 0D) {
        UpdateDuration = other.UpdateDuration;
      }
      if (other.Resolution != 0D) {
        Resolution = other.Resolution;
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      if (other.ArchitectureType.Length != 0) {
        ArchitectureType = other.ArchitectureType;
      }
      if (other.Range != 0D) {
        Range = other.Range;
      }
      if (other.FilterByRange != false) {
        FilterByRange = other.FilterByRange;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Entity = input.ReadString();
            break;
          }
          case 17: {
            UpdateDuration = input.ReadDouble();
            break;
          }
          case 25: {
            Resolution = input.ReadDouble();
            break;
          }
          case 32: {
            Width = input.ReadUInt32();
            break;
          }
          case 40: {
            Height = input.ReadUInt32();
            break;
          }
          case 50: {
            ArchitectureType = input.ReadString();
            break;
          }
          case 57: {
            Range = input.ReadDouble();
            break;
          }
          case 64: {
            FilterByRange = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// Updated entity status by the simulator.
  /// </summary>
  public sealed partial class UpdatedEntityStatus : pb::IMessage<UpdatedEntityStatus> {
    private static readonly pb::MessageParser<UpdatedEntityStatus> _parser = new pb::MessageParser<UpdatedEntityStatus>(() => new UpdatedEntityStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdatedEntityStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SimulationApiSchema.SimulationApiSchemaReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatedEntityStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatedEntityStatus(UpdatedEntityStatus other) : this() {
      name_ = other.name_;
      actionStatus_ = other.actionStatus_ != null ? other.actionStatus_.Clone() : null;
      pose_ = other.pose_ != null ? other.pose_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatedEntityStatus Clone() {
      return new UpdatedEntityStatus(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Name of the entity.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "action_status" field.</summary>
    public const int ActionStatusFieldNumber = 2;
    private global::TrafficSimulatorMsgs.ActionStatus actionStatus_;
    /// <summary>
    /// Action status of the entity.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TrafficSimulatorMsgs.ActionStatus ActionStatus {
      get { return actionStatus_; }
      set {
        actionStatus_ = value;
      }
    }

    /// <summary>Field number for the "pose" field.</summary>
    public const int PoseFieldNumber = 3;
    private global::GeometryMsgs.Pose pose_;
    /// <summary>
    /// Pose of the entity in the map coordinate.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GeometryMsgs.Pose Pose {
      get { return pose_; }
      set {
        pose_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdatedEntityStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdatedEntityStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!object.Equals(ActionStatus, other.ActionStatus)) return false;
      if (!object.Equals(Pose, other.Pose)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (actionStatus_ != null) hash ^= ActionStatus.GetHashCode();
      if (pose_ != null) hash ^= Pose.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (actionStatus_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ActionStatus);
      }
      if (pose_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Pose);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (actionStatus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ActionStatus);
      }
      if (pose_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pose);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdatedEntityStatus other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.actionStatus_ != null) {
        if (actionStatus_ == null) {
          ActionStatus = new global::TrafficSimulatorMsgs.ActionStatus();
        }
        ActionStatus.MergeFrom(other.ActionStatus);
      }
      if (other.pose_ != null) {
        if (pose_ == null) {
          Pose = new global::GeometryMsgs.Pose();
        }
        Pose.MergeFrom(other.Pose);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            if (actionStatus_ == null) {
              ActionStatus = new global::TrafficSimulatorMsgs.ActionStatus();
            }
            input.ReadMessage(ActionStatus);
            break;
          }
          case 26: {
            if (pose_ == null) {
              Pose = new global::GeometryMsgs.Pose();
            }
            input.ReadMessage(Pose);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// Requests initializing simulation.
  /// </summary>
  public sealed partial class InitializeRequest : pb::IMessage<InitializeRequest> {
    private static readonly pb::MessageParser<InitializeRequest> _parser = new pb::MessageParser<InitializeRequest>(() => new InitializeRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InitializeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SimulationApiSchema.SimulationApiSchemaReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeRequest(InitializeRequest other) : this() {
      realtimeFactor_ = other.realtimeFactor_;
      stepTime_ = other.stepTime_;
      initializeTime_ = other.initializeTime_;
      initializeRosTime_ = other.initializeRosTime_ != null ? other.initializeRosTime_.Clone() : null;
      lanelet2MapPath_ = other.lanelet2MapPath_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeRequest Clone() {
      return new InitializeRequest(this);
    }

    /// <summary>Field number for the "realtime_factor" field.</summary>
    public const int RealtimeFactorFieldNumber = 1;
    private double realtimeFactor_;
    /// <summary>
    /// Realtime factor of the simulation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double RealtimeFactor {
      get { return realtimeFactor_; }
      set {
        realtimeFactor_ = value;
      }
    }

    /// <summary>Field number for the "step_time" field.</summary>
    public const int StepTimeFieldNumber = 2;
    private double stepTime_;
    /// <summary>
    /// Step time of the simulation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double StepTime {
      get { return stepTime_; }
      set {
        stepTime_ = value;
      }
    }

    /// <summary>Field number for the "initialize_time" field.</summary>
    public const int InitializeTimeFieldNumber = 3;
    private double initializeTime_;
    /// <summary>
    /// Simulation time at initialization
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double InitializeTime {
      get { return initializeTime_; }
      set {
        initializeTime_ = value;
      }
    }

    /// <summary>Field number for the "initialize_ros_time" field.</summary>
    public const int InitializeRosTimeFieldNumber = 4;
    private global::BuiltinInterfaces.Time initializeRosTime_;
    /// <summary>
    /// ROS time at initialization
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::BuiltinInterfaces.Time InitializeRosTime {
      get { return initializeRosTime_; }
      set {
        initializeRosTime_ = value;
      }
    }

    /// <summary>Field number for the "lanelet2_map_path" field.</summary>
    public const int Lanelet2MapPathFieldNumber = 5;
    private string lanelet2MapPath_ = "";
    /// <summary>
    /// Path to lanelet2 map file
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Lanelet2MapPath {
      get { return lanelet2MapPath_; }
      set {
        lanelet2MapPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InitializeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InitializeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RealtimeFactor, other.RealtimeFactor)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(StepTime, other.StepTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(InitializeTime, other.InitializeTime)) return false;
      if (!object.Equals(InitializeRosTime, other.InitializeRosTime)) return false;
      if (Lanelet2MapPath != other.Lanelet2MapPath) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RealtimeFactor != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RealtimeFactor);
      if (StepTime != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(StepTime);
      if (InitializeTime != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(InitializeTime);
      if (initializeRosTime_ != null) hash ^= InitializeRosTime.GetHashCode();
      if (Lanelet2MapPath.Length != 0) hash ^= Lanelet2MapPath.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RealtimeFactor != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(RealtimeFactor);
      }
      if (StepTime != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(StepTime);
      }
      if (InitializeTime != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(InitializeTime);
      }
      if (initializeRosTime_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(InitializeRosTime);
      }
      if (Lanelet2MapPath.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Lanelet2MapPath);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RealtimeFactor != 0D) {
        size += 1 + 8;
      }
      if (StepTime != 0D) {
        size += 1 + 8;
      }
      if (InitializeTime != 0D) {
        size += 1 + 8;
      }
      if (initializeRosTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InitializeRosTime);
      }
      if (Lanelet2MapPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Lanelet2MapPath);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InitializeRequest other) {
      if (other == null) {
        return;
      }
      if (other.RealtimeFactor != 0D) {
        RealtimeFactor = other.RealtimeFactor;
      }
      if (other.StepTime != 0D) {
        StepTime = other.StepTime;
      }
      if (other.InitializeTime != 0D) {
        InitializeTime = other.InitializeTime;
      }
      if (other.initializeRosTime_ != null) {
        if (initializeRosTime_ == null) {
          InitializeRosTime = new global::BuiltinInterfaces.Time();
        }
        InitializeRosTime.MergeFrom(other.InitializeRosTime);
      }
      if (other.Lanelet2MapPath.Length != 0) {
        Lanelet2MapPath = other.Lanelet2MapPath;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            RealtimeFactor = input.ReadDouble();
            break;
          }
          case 17: {
            StepTime = input.ReadDouble();
            break;
          }
          case 25: {
            InitializeTime = input.ReadDouble();
            break;
          }
          case 34: {
            if (initializeRosTime_ == null) {
              InitializeRosTime = new global::BuiltinInterfaces.Time();
            }
            input.ReadMessage(InitializeRosTime);
            break;
          }
          case 42: {
            Lanelet2MapPath = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// Result of initializing simulation.
  /// </summary>
  public sealed partial class InitializeResponse : pb::IMessage<InitializeResponse> {
    private static readonly pb::MessageParser<InitializeResponse> _parser = new pb::MessageParser<InitializeResponse>(() => new InitializeResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InitializeResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SimulationApiSchema.SimulationApiSchemaReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeResponse(InitializeResponse other) : this() {
      result_ = other.result_ != null ? other.result_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeResponse Clone() {
      return new InitializeResponse(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::SimulationApiSchema.Result result_;
    /// <summary>
    /// Result of [InitializeRequest](#InitializeRequest)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SimulationApiSchema.Result Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InitializeResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InitializeResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Result, other.Result)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (result_ != null) hash ^= Result.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (result_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (result_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InitializeResponse other) {
      if (other == null) {
        return;
      }
      if (other.result_ != null) {
        if (result_ == null) {
          Result = new global::SimulationApiSchema.Result();
        }
        Result.MergeFrom(other.Result);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (result_ == null) {
              Result = new global::SimulationApiSchema.Result();
            }
            input.ReadMessage(Result);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// Requests updating simulation frame.
  /// </summary>
  public sealed partial class UpdateFrameRequest : pb::IMessage<UpdateFrameRequest> {
    private static readonly pb::MessageParser<UpdateFrameRequest> _parser = new pb::MessageParser<UpdateFrameRequest>(() => new UpdateFrameRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateFrameRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SimulationApiSchema.SimulationApiSchemaReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateFrameRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateFrameRequest(UpdateFrameRequest other) : this() {
      currentSimulationTime_ = other.currentSimulationTime_;
      currentScenarioTime_ = other.currentScenarioTime_;
      currentRosTime_ = other.currentRosTime_ != null ? other.currentRosTime_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateFrameRequest Clone() {
      return new UpdateFrameRequest(this);
    }

    /// <summary>Field number for the "current_simulation_time" field.</summary>
    public const int CurrentSimulationTimeFieldNumber = 1;
    private double currentSimulationTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CurrentSimulationTime {
      get { return currentSimulationTime_; }
      set {
        currentSimulationTime_ = value;
      }
    }

    /// <summary>Field number for the "current_scenario_time" field.</summary>
    public const int CurrentScenarioTimeFieldNumber = 2;
    private double currentScenarioTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CurrentScenarioTime {
      get { return currentScenarioTime_; }
      set {
        currentScenarioTime_ = value;
      }
    }

    /// <summary>Field number for the "current_ros_time" field.</summary>
    public const int CurrentRosTimeFieldNumber = 3;
    private global::BuiltinInterfaces.Time currentRosTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::BuiltinInterfaces.Time CurrentRosTime {
      get { return currentRosTime_; }
      set {
        currentRosTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateFrameRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateFrameRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CurrentSimulationTime, other.CurrentSimulationTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CurrentScenarioTime, other.CurrentScenarioTime)) return false;
      if (!object.Equals(CurrentRosTime, other.CurrentRosTime)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurrentSimulationTime != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CurrentSimulationTime);
      if (CurrentScenarioTime != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CurrentScenarioTime);
      if (currentRosTime_ != null) hash ^= CurrentRosTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurrentSimulationTime != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(CurrentSimulationTime);
      }
      if (CurrentScenarioTime != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(CurrentScenarioTime);
      }
      if (currentRosTime_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CurrentRosTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurrentSimulationTime != 0D) {
        size += 1 + 8;
      }
      if (CurrentScenarioTime != 0D) {
        size += 1 + 8;
      }
      if (currentRosTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurrentRosTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateFrameRequest other) {
      if (other == null) {
        return;
      }
      if (other.CurrentSimulationTime != 0D) {
        CurrentSimulationTime = other.CurrentSimulationTime;
      }
      if (other.CurrentScenarioTime != 0D) {
        CurrentScenarioTime = other.CurrentScenarioTime;
      }
      if (other.currentRosTime_ != null) {
        if (currentRosTime_ == null) {
          CurrentRosTime = new global::BuiltinInterfaces.Time();
        }
        CurrentRosTime.MergeFrom(other.CurrentRosTime);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            CurrentSimulationTime = input.ReadDouble();
            break;
          }
          case 17: {
            CurrentScenarioTime = input.ReadDouble();
            break;
          }
          case 26: {
            if (currentRosTime_ == null) {
              CurrentRosTime = new global::BuiltinInterfaces.Time();
            }
            input.ReadMessage(CurrentRosTime);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// Response of updating simulation frame.
  /// </summary>
  public sealed partial class UpdateFrameResponse : pb::IMessage<UpdateFrameResponse> {
    private static readonly pb::MessageParser<UpdateFrameResponse> _parser = new pb::MessageParser<UpdateFrameResponse>(() => new UpdateFrameResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateFrameResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SimulationApiSchema.SimulationApiSchemaReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateFrameResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateFrameResponse(UpdateFrameResponse other) : this() {
      result_ = other.result_ != null ? other.result_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateFrameResponse Clone() {
      return new UpdateFrameResponse(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::SimulationApiSchema.Result result_;
    /// <summary>
    /// Result of [UpdateFrameRequest](#UpdateFrameRequest)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SimulationApiSchema.Result Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateFrameResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateFrameResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Result, other.Result)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (result_ != null) hash ^= Result.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (result_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (result_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateFrameResponse other) {
      if (other == null) {
        return;
      }
      if (other.result_ != null) {
        if (result_ == null) {
          Result = new global::SimulationApiSchema.Result();
        }
        Result.MergeFrom(other.Result);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (result_ == null) {
              Result = new global::SimulationApiSchema.Result();
            }
            input.ReadMessage(Result);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// Requests spawning vehicle entity.
  /// </summary>
  public sealed partial class SpawnVehicleEntityRequest : pb::IMessage<SpawnVehicleEntityRequest> {
    private static readonly pb::MessageParser<SpawnVehicleEntityRequest> _parser = new pb::MessageParser<SpawnVehicleEntityRequest>(() => new SpawnVehicleEntityRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpawnVehicleEntityRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SimulationApiSchema.SimulationApiSchemaReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpawnVehicleEntityRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpawnVehicleEntityRequest(SpawnVehicleEntityRequest other) : this() {
      parameters_ = other.parameters_ != null ? other.parameters_.Clone() : null;
      isEgo_ = other.isEgo_;
      assetKey_ = other.assetKey_;
      pose_ = other.pose_ != null ? other.pose_.Clone() : null;
      initialSpeed_ = other.initialSpeed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpawnVehicleEntityRequest Clone() {
      return new SpawnVehicleEntityRequest(this);
    }

    /// <summary>Field number for the "parameters" field.</summary>
    public const int ParametersFieldNumber = 1;
    private global::TrafficSimulatorMsgs.VehicleParameters parameters_;
    /// <summary>
    /// Parameters of vehicle entity.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TrafficSimulatorMsgs.VehicleParameters Parameters {
      get { return parameters_; }
      set {
        parameters_ = value;
      }
    }

    /// <summary>Field number for the "is_ego" field.</summary>
    public const int IsEgoFieldNumber = 2;
    private bool isEgo_;
    /// <summary>
    /// If true, the entity is Ego vehicle. (Autoware vehicle.)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEgo {
      get { return isEgo_; }
      set {
        isEgo_ = value;
      }
    }

    /// <summary>Field number for the "asset_key" field.</summary>
    public const int AssetKeyFieldNumber = 3;
    private string assetKey_ = "";
    /// <summary>
    /// Asset key of the entity simulator entity
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AssetKey {
      get { return assetKey_; }
      set {
        assetKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pose" field.</summary>
    public const int PoseFieldNumber = 4;
    private global::GeometryMsgs.Pose pose_;
    /// <summary>
    /// Entity initial pose
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GeometryMsgs.Pose Pose {
      get { return pose_; }
      set {
        pose_ = value;
      }
    }

    /// <summary>Field number for the "initial_speed" field.</summary>
    public const int InitialSpeedFieldNumber = 5;
    private double initialSpeed_;
    /// <summary>
    /// Entity initial speed
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double InitialSpeed {
      get { return initialSpeed_; }
      set {
        initialSpeed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpawnVehicleEntityRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpawnVehicleEntityRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Parameters, other.Parameters)) return false;
      if (IsEgo != other.IsEgo) return false;
      if (AssetKey != other.AssetKey) return false;
      if (!object.Equals(Pose, other.Pose)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(InitialSpeed, other.InitialSpeed)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (parameters_ != null) hash ^= Parameters.GetHashCode();
      if (IsEgo != false) hash ^= IsEgo.GetHashCode();
      if (AssetKey.Length != 0) hash ^= AssetKey.GetHashCode();
      if (pose_ != null) hash ^= Pose.GetHashCode();
      if (InitialSpeed != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(InitialSpeed);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (parameters_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Parameters);
      }
      if (IsEgo != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsEgo);
      }
      if (AssetKey.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AssetKey);
      }
      if (pose_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Pose);
      }
      if (InitialSpeed != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(InitialSpeed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (parameters_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Parameters);
      }
      if (IsEgo != false) {
        size += 1 + 1;
      }
      if (AssetKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AssetKey);
      }
      if (pose_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pose);
      }
      if (InitialSpeed != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpawnVehicleEntityRequest other) {
      if (other == null) {
        return;
      }
      if (other.parameters_ != null) {
        if (parameters_ == null) {
          Parameters = new global::TrafficSimulatorMsgs.VehicleParameters();
        }
        Parameters.MergeFrom(other.Parameters);
      }
      if (other.IsEgo != false) {
        IsEgo = other.IsEgo;
      }
      if (other.AssetKey.Length != 0) {
        AssetKey = other.AssetKey;
      }
      if (other.pose_ != null) {
        if (pose_ == null) {
          Pose = new global::GeometryMsgs.Pose();
        }
        Pose.MergeFrom(other.Pose);
      }
      if (other.InitialSpeed != 0D) {
        InitialSpeed = other.InitialSpeed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (parameters_ == null) {
              Parameters = new global::TrafficSimulatorMsgs.VehicleParameters();
            }
            input.ReadMessage(Parameters);
            break;
          }
          case 16: {
            IsEgo = input.ReadBool();
            break;
          }
          case 26: {
            AssetKey = input.ReadString();
            break;
          }
          case 34: {
            if (pose_ == null) {
              Pose = new global::GeometryMsgs.Pose();
            }
            input.ReadMessage(Pose);
            break;
          }
          case 41: {
            InitialSpeed = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// Response of spawning vehicle entity.
  /// </summary>
  public sealed partial class SpawnVehicleEntityResponse : pb::IMessage<SpawnVehicleEntityResponse> {
    private static readonly pb::MessageParser<SpawnVehicleEntityResponse> _parser = new pb::MessageParser<SpawnVehicleEntityResponse>(() => new SpawnVehicleEntityResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpawnVehicleEntityResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SimulationApiSchema.SimulationApiSchemaReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpawnVehicleEntityResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpawnVehicleEntityResponse(SpawnVehicleEntityResponse other) : this() {
      result_ = other.result_ != null ? other.result_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpawnVehicleEntityResponse Clone() {
      return new SpawnVehicleEntityResponse(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::SimulationApiSchema.Result result_;
    /// <summary>
    /// Result of [SpawnVehicleEntityResponse](#SpawnVehicleEntityResponse)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SimulationApiSchema.Result Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpawnVehicleEntityResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpawnVehicleEntityResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Result, other.Result)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (result_ != null) hash ^= Result.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (result_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (result_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpawnVehicleEntityResponse other) {
      if (other == null) {
        return;
      }
      if (other.result_ != null) {
        if (result_ == null) {
          Result = new global::SimulationApiSchema.Result();
        }
        Result.MergeFrom(other.Result);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (result_ == null) {
              Result = new global::SimulationApiSchema.Result();
            }
            input.ReadMessage(Result);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// Requests spawning pedestrian entity.
  /// </summary>
  public sealed partial class SpawnPedestrianEntityRequest : pb::IMessage<SpawnPedestrianEntityRequest> {
    private static readonly pb::MessageParser<SpawnPedestrianEntityRequest> _parser = new pb::MessageParser<SpawnPedestrianEntityRequest>(() => new SpawnPedestrianEntityRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpawnPedestrianEntityRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SimulationApiSchema.SimulationApiSchemaReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpawnPedestrianEntityRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpawnPedestrianEntityRequest(SpawnPedestrianEntityRequest other) : this() {
      parameters_ = other.parameters_ != null ? other.parameters_.Clone() : null;
      assetKey_ = other.assetKey_;
      pose_ = other.pose_ != null ? other.pose_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpawnPedestrianEntityRequest Clone() {
      return new SpawnPedestrianEntityRequest(this);
    }

    /// <summary>Field number for the "parameters" field.</summary>
    public const int ParametersFieldNumber = 1;
    private global::TrafficSimulatorMsgs.PedestrianParameters parameters_;
    /// <summary>
    /// Parameters of pedestrian entity.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TrafficSimulatorMsgs.PedestrianParameters Parameters {
      get { return parameters_; }
      set {
        parameters_ = value;
      }
    }

    /// <summary>Field number for the "asset_key" field.</summary>
    public const int AssetKeyFieldNumber = 2;
    private string assetKey_ = "";
    /// <summary>
    /// Asset key of the entity simulator entity
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AssetKey {
      get { return assetKey_; }
      set {
        assetKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pose" field.</summary>
    public const int PoseFieldNumber = 3;
    private global::GeometryMsgs.Pose pose_;
    /// <summary>
    /// Entity initial pose
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GeometryMsgs.Pose Pose {
      get { return pose_; }
      set {
        pose_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpawnPedestrianEntityRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpawnPedestrianEntityRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Parameters, other.Parameters)) return false;
      if (AssetKey != other.AssetKey) return false;
      if (!object.Equals(Pose, other.Pose)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (parameters_ != null) hash ^= Parameters.GetHashCode();
      if (AssetKey.Length != 0) hash ^= AssetKey.GetHashCode();
      if (pose_ != null) hash ^= Pose.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (parameters_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Parameters);
      }
      if (AssetKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AssetKey);
      }
      if (pose_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Pose);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (parameters_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Parameters);
      }
      if (AssetKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AssetKey);
      }
      if (pose_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pose);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpawnPedestrianEntityRequest other) {
      if (other == null) {
        return;
      }
      if (other.parameters_ != null) {
        if (parameters_ == null) {
          Parameters = new global::TrafficSimulatorMsgs.PedestrianParameters();
        }
        Parameters.MergeFrom(other.Parameters);
      }
      if (other.AssetKey.Length != 0) {
        AssetKey = other.AssetKey;
      }
      if (other.pose_ != null) {
        if (pose_ == null) {
          Pose = new global::GeometryMsgs.Pose();
        }
        Pose.MergeFrom(other.Pose);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (parameters_ == null) {
              Parameters = new global::TrafficSimulatorMsgs.PedestrianParameters();
            }
            input.ReadMessage(Parameters);
            break;
          }
          case 18: {
            AssetKey = input.ReadString();
            break;
          }
          case 26: {
            if (pose_ == null) {
              Pose = new global::GeometryMsgs.Pose();
            }
            input.ReadMessage(Pose);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// Response of spawning vehicle entity.
  /// </summary>
  public sealed partial class SpawnPedestrianEntityResponse : pb::IMessage<SpawnPedestrianEntityResponse> {
    private static readonly pb::MessageParser<SpawnPedestrianEntityResponse> _parser = new pb::MessageParser<SpawnPedestrianEntityResponse>(() => new SpawnPedestrianEntityResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpawnPedestrianEntityResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SimulationApiSchema.SimulationApiSchemaReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpawnPedestrianEntityResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpawnPedestrianEntityResponse(SpawnPedestrianEntityResponse other) : this() {
      result_ = other.result_ != null ? other.result_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpawnPedestrianEntityResponse Clone() {
      return new SpawnPedestrianEntityResponse(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::SimulationApiSchema.Result result_;
    /// <summary>
    /// Result of [SpawnPedestrianEntityResponse](#SpawnPedestrianEntityResponse)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SimulationApiSchema.Result Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpawnPedestrianEntityResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpawnPedestrianEntityResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Result, other.Result)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (result_ != null) hash ^= Result.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (result_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (result_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpawnPedestrianEntityResponse other) {
      if (other == null) {
        return;
      }
      if (other.result_ != null) {
        if (result_ == null) {
          Result = new global::SimulationApiSchema.Result();
        }
        Result.MergeFrom(other.Result);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (result_ == null) {
              Result = new global::SimulationApiSchema.Result();
            }
            input.ReadMessage(Result);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// Requests spawning misc object entity
  /// </summary>
  public sealed partial class SpawnMiscObjectEntityRequest : pb::IMessage<SpawnMiscObjectEntityRequest> {
    private static readonly pb::MessageParser<SpawnMiscObjectEntityRequest> _parser = new pb::MessageParser<SpawnMiscObjectEntityRequest>(() => new SpawnMiscObjectEntityRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpawnMiscObjectEntityRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SimulationApiSchema.SimulationApiSchemaReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpawnMiscObjectEntityRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpawnMiscObjectEntityRequest(SpawnMiscObjectEntityRequest other) : this() {
      parameters_ = other.parameters_ != null ? other.parameters_.Clone() : null;
      assetKey_ = other.assetKey_;
      pose_ = other.pose_ != null ? other.pose_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpawnMiscObjectEntityRequest Clone() {
      return new SpawnMiscObjectEntityRequest(this);
    }

    /// <summary>Field number for the "parameters" field.</summary>
    public const int ParametersFieldNumber = 1;
    private global::TrafficSimulatorMsgs.MiscObjectParameters parameters_;
    /// <summary>
    /// Parameters of misc object entity.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TrafficSimulatorMsgs.MiscObjectParameters Parameters {
      get { return parameters_; }
      set {
        parameters_ = value;
      }
    }

    /// <summary>Field number for the "asset_key" field.</summary>
    public const int AssetKeyFieldNumber = 2;
    private string assetKey_ = "";
    /// <summary>
    /// Asset key of the entity simulator entity
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AssetKey {
      get { return assetKey_; }
      set {
        assetKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pose" field.</summary>
    public const int PoseFieldNumber = 3;
    private global::GeometryMsgs.Pose pose_;
    /// <summary>
    /// Entity initial pose
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GeometryMsgs.Pose Pose {
      get { return pose_; }
      set {
        pose_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpawnMiscObjectEntityRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpawnMiscObjectEntityRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Parameters, other.Parameters)) return false;
      if (AssetKey != other.AssetKey) return false;
      if (!object.Equals(Pose, other.Pose)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (parameters_ != null) hash ^= Parameters.GetHashCode();
      if (AssetKey.Length != 0) hash ^= AssetKey.GetHashCode();
      if (pose_ != null) hash ^= Pose.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (parameters_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Parameters);
      }
      if (AssetKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AssetKey);
      }
      if (pose_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Pose);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (parameters_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Parameters);
      }
      if (AssetKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AssetKey);
      }
      if (pose_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pose);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpawnMiscObjectEntityRequest other) {
      if (other == null) {
        return;
      }
      if (other.parameters_ != null) {
        if (parameters_ == null) {
          Parameters = new global::TrafficSimulatorMsgs.MiscObjectParameters();
        }
        Parameters.MergeFrom(other.Parameters);
      }
      if (other.AssetKey.Length != 0) {
        AssetKey = other.AssetKey;
      }
      if (other.pose_ != null) {
        if (pose_ == null) {
          Pose = new global::GeometryMsgs.Pose();
        }
        Pose.MergeFrom(other.Pose);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (parameters_ == null) {
              Parameters = new global::TrafficSimulatorMsgs.MiscObjectParameters();
            }
            input.ReadMessage(Parameters);
            break;
          }
          case 18: {
            AssetKey = input.ReadString();
            break;
          }
          case 26: {
            if (pose_ == null) {
              Pose = new global::GeometryMsgs.Pose();
            }
            input.ReadMessage(Pose);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// Response of spawning misc object entity
  /// </summary>
  public sealed partial class SpawnMiscObjectEntityResponse : pb::IMessage<SpawnMiscObjectEntityResponse> {
    private static readonly pb::MessageParser<SpawnMiscObjectEntityResponse> _parser = new pb::MessageParser<SpawnMiscObjectEntityResponse>(() => new SpawnMiscObjectEntityResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpawnMiscObjectEntityResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SimulationApiSchema.SimulationApiSchemaReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpawnMiscObjectEntityResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpawnMiscObjectEntityResponse(SpawnMiscObjectEntityResponse other) : this() {
      result_ = other.result_ != null ? other.result_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpawnMiscObjectEntityResponse Clone() {
      return new SpawnMiscObjectEntityResponse(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::SimulationApiSchema.Result result_;
    /// <summary>
    /// Result of [SpawnPedestrianEntityResponse](#SpawnPedestrianEntityResponse)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SimulationApiSchema.Result Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpawnMiscObjectEntityResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpawnMiscObjectEntityResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Result, other.Result)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (result_ != null) hash ^= Result.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (result_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (result_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpawnMiscObjectEntityResponse other) {
      if (other == null) {
        return;
      }
      if (other.result_ != null) {
        if (result_ == null) {
          Result = new global::SimulationApiSchema.Result();
        }
        Result.MergeFrom(other.Result);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (result_ == null) {
              Result = new global::SimulationApiSchema.Result();
            }
            input.ReadMessage(Result);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// Requests despawning entity.
  /// </summary>
  public sealed partial class DespawnEntityRequest : pb::IMessage<DespawnEntityRequest> {
    private static readonly pb::MessageParser<DespawnEntityRequest> _parser = new pb::MessageParser<DespawnEntityRequest>(() => new DespawnEntityRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DespawnEntityRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SimulationApiSchema.SimulationApiSchemaReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DespawnEntityRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DespawnEntityRequest(DespawnEntityRequest other) : this() {
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DespawnEntityRequest Clone() {
      return new DespawnEntityRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Name of the entity you want to despawn.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DespawnEntityRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DespawnEntityRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DespawnEntityRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// Response of despawning entity.
  /// </summary>
  public sealed partial class DespawnEntityResponse : pb::IMessage<DespawnEntityResponse> {
    private static readonly pb::MessageParser<DespawnEntityResponse> _parser = new pb::MessageParser<DespawnEntityResponse>(() => new DespawnEntityResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DespawnEntityResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SimulationApiSchema.SimulationApiSchemaReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DespawnEntityResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DespawnEntityResponse(DespawnEntityResponse other) : this() {
      result_ = other.result_ != null ? other.result_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DespawnEntityResponse Clone() {
      return new DespawnEntityResponse(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::SimulationApiSchema.Result result_;
    /// <summary>
    /// Result of [DespawnEntityRequest](#DespawnEntityRequest)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SimulationApiSchema.Result Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DespawnEntityResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DespawnEntityResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Result, other.Result)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (result_ != null) hash ^= Result.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (result_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (result_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DespawnEntityResponse other) {
      if (other == null) {
        return;
      }
      if (other.result_ != null) {
        if (result_ == null) {
          Result = new global::SimulationApiSchema.Result();
        }
        Result.MergeFrom(other.Result);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (result_ == null) {
              Result = new global::SimulationApiSchema.Result();
            }
            input.ReadMessage(Result);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// Requests updating entity status.
  /// </summary>
  public sealed partial class UpdateEntityStatusRequest : pb::IMessage<UpdateEntityStatusRequest> {
    private static readonly pb::MessageParser<UpdateEntityStatusRequest> _parser = new pb::MessageParser<UpdateEntityStatusRequest>(() => new UpdateEntityStatusRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateEntityStatusRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SimulationApiSchema.SimulationApiSchemaReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateEntityStatusRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateEntityStatusRequest(UpdateEntityStatusRequest other) : this() {
      status_ = other.status_.Clone();
      npcLogicStarted_ = other.npcLogicStarted_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateEntityStatusRequest Clone() {
      return new UpdateEntityStatusRequest(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SimulationApiSchema.EntityStatus> _repeated_status_codec
        = pb::FieldCodec.ForMessage(10, global::SimulationApiSchema.EntityStatus.Parser);
    private readonly pbc::RepeatedField<global::SimulationApiSchema.EntityStatus> status_ = new pbc::RepeatedField<global::SimulationApiSchema.EntityStatus>();
    /// <summary>
    /// List of updated entity status in traffic simulator.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SimulationApiSchema.EntityStatus> Status {
      get { return status_; }
    }

    /// <summary>Field number for the "npc_logic_started" field.</summary>
    public const int NpcLogicStartedFieldNumber = 2;
    private bool npcLogicStarted_;
    /// <summary>
    /// Npc logic started flag
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NpcLogicStarted {
      get { return npcLogicStarted_; }
      set {
        npcLogicStarted_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateEntityStatusRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateEntityStatusRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!status_.Equals(other.status_)) return false;
      if (NpcLogicStarted != other.NpcLogicStarted) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= status_.GetHashCode();
      if (NpcLogicStarted != false) hash ^= NpcLogicStarted.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      status_.WriteTo(output, _repeated_status_codec);
      if (NpcLogicStarted != false) {
        output.WriteRawTag(16);
        output.WriteBool(NpcLogicStarted);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += status_.CalculateSize(_repeated_status_codec);
      if (NpcLogicStarted != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateEntityStatusRequest other) {
      if (other == null) {
        return;
      }
      status_.Add(other.status_);
      if (other.NpcLogicStarted != false) {
        NpcLogicStarted = other.NpcLogicStarted;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            status_.AddEntriesFrom(input, _repeated_status_codec);
            break;
          }
          case 16: {
            NpcLogicStarted = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// Response of updating entity status.
  /// </summary>
  public sealed partial class UpdateEntityStatusResponse : pb::IMessage<UpdateEntityStatusResponse> {
    private static readonly pb::MessageParser<UpdateEntityStatusResponse> _parser = new pb::MessageParser<UpdateEntityStatusResponse>(() => new UpdateEntityStatusResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateEntityStatusResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SimulationApiSchema.SimulationApiSchemaReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateEntityStatusResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateEntityStatusResponse(UpdateEntityStatusResponse other) : this() {
      result_ = other.result_ != null ? other.result_.Clone() : null;
      status_ = other.status_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateEntityStatusResponse Clone() {
      return new UpdateEntityStatusResponse(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::SimulationApiSchema.Result result_;
    /// <summary>
    /// Result of [UpdateEntityStatusRequest](#UpdateEntityStatusRequest)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SimulationApiSchema.Result Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SimulationApiSchema.UpdatedEntityStatus> _repeated_status_codec
        = pb::FieldCodec.ForMessage(18, global::SimulationApiSchema.UpdatedEntityStatus.Parser);
    private readonly pbc::RepeatedField<global::SimulationApiSchema.UpdatedEntityStatus> status_ = new pbc::RepeatedField<global::SimulationApiSchema.UpdatedEntityStatus>();
    /// <summary>
    /// List of updated entity status in sensor/dynamics simulator
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SimulationApiSchema.UpdatedEntityStatus> Status {
      get { return status_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateEntityStatusResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateEntityStatusResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Result, other.Result)) return false;
      if(!status_.Equals(other.status_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (result_ != null) hash ^= Result.GetHashCode();
      hash ^= status_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (result_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Result);
      }
      status_.WriteTo(output, _repeated_status_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (result_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
      }
      size += status_.CalculateSize(_repeated_status_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateEntityStatusResponse other) {
      if (other == null) {
        return;
      }
      if (other.result_ != null) {
        if (result_ == null) {
          Result = new global::SimulationApiSchema.Result();
        }
        Result.MergeFrom(other.Result);
      }
      status_.Add(other.status_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (result_ == null) {
              Result = new global::SimulationApiSchema.Result();
            }
            input.ReadMessage(Result);
            break;
          }
          case 18: {
            status_.AddEntriesFrom(input, _repeated_status_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// Requests attaching a traffic light detector emulator.
  /// </summary>
  public sealed partial class AttachPseudoTrafficLightDetectorRequest : pb::IMessage<AttachPseudoTrafficLightDetectorRequest> {
    private static readonly pb::MessageParser<AttachPseudoTrafficLightDetectorRequest> _parser = new pb::MessageParser<AttachPseudoTrafficLightDetectorRequest>(() => new AttachPseudoTrafficLightDetectorRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AttachPseudoTrafficLightDetectorRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SimulationApiSchema.SimulationApiSchemaReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttachPseudoTrafficLightDetectorRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttachPseudoTrafficLightDetectorRequest(AttachPseudoTrafficLightDetectorRequest other) : this() {
      configuration_ = other.configuration_ != null ? other.configuration_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttachPseudoTrafficLightDetectorRequest Clone() {
      return new AttachPseudoTrafficLightDetectorRequest(this);
    }

    /// <summary>Field number for the "configuration" field.</summary>
    public const int ConfigurationFieldNumber = 1;
    private global::SimulationApiSchema.PseudoTrafficLightDetectorConfiguration configuration_;
    /// <summary>
    /// Configuration of the traffic light detector emulator.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SimulationApiSchema.PseudoTrafficLightDetectorConfiguration Configuration {
      get { return configuration_; }
      set {
        configuration_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AttachPseudoTrafficLightDetectorRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AttachPseudoTrafficLightDetectorRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Configuration, other.Configuration)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (configuration_ != null) hash ^= Configuration.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (configuration_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Configuration);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (configuration_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Configuration);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AttachPseudoTrafficLightDetectorRequest other) {
      if (other == null) {
        return;
      }
      if (other.configuration_ != null) {
        if (configuration_ == null) {
          Configuration = new global::SimulationApiSchema.PseudoTrafficLightDetectorConfiguration();
        }
        Configuration.MergeFrom(other.Configuration);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (configuration_ == null) {
              Configuration = new global::SimulationApiSchema.PseudoTrafficLightDetectorConfiguration();
            }
            input.ReadMessage(Configuration);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// Response of attaching a traffic light detector emulator.
  /// </summary>
  public sealed partial class AttachPseudoTrafficLightDetectorResponse : pb::IMessage<AttachPseudoTrafficLightDetectorResponse> {
    private static readonly pb::MessageParser<AttachPseudoTrafficLightDetectorResponse> _parser = new pb::MessageParser<AttachPseudoTrafficLightDetectorResponse>(() => new AttachPseudoTrafficLightDetectorResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AttachPseudoTrafficLightDetectorResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SimulationApiSchema.SimulationApiSchemaReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttachPseudoTrafficLightDetectorResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttachPseudoTrafficLightDetectorResponse(AttachPseudoTrafficLightDetectorResponse other) : this() {
      result_ = other.result_ != null ? other.result_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttachPseudoTrafficLightDetectorResponse Clone() {
      return new AttachPseudoTrafficLightDetectorResponse(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::SimulationApiSchema.Result result_;
    /// <summary>
    /// Result of [AttachPseudoTrafficLightDetectorRequest](#AttachPseudoTrafficLightDetectorRequest)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SimulationApiSchema.Result Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AttachPseudoTrafficLightDetectorResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AttachPseudoTrafficLightDetectorResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Result, other.Result)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (result_ != null) hash ^= Result.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (result_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (result_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AttachPseudoTrafficLightDetectorResponse other) {
      if (other == null) {
        return;
      }
      if (other.result_ != null) {
        if (result_ == null) {
          Result = new global::SimulationApiSchema.Result();
        }
        Result.MergeFrom(other.Result);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (result_ == null) {
              Result = new global::SimulationApiSchema.Result();
            }
            input.ReadMessage(Result);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// Requests attaching a lidar sensor to the target entity.
  /// </summary>
  public sealed partial class AttachLidarSensorRequest : pb::IMessage<AttachLidarSensorRequest> {
    private static readonly pb::MessageParser<AttachLidarSensorRequest> _parser = new pb::MessageParser<AttachLidarSensorRequest>(() => new AttachLidarSensorRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AttachLidarSensorRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SimulationApiSchema.SimulationApiSchemaReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttachLidarSensorRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttachLidarSensorRequest(AttachLidarSensorRequest other) : this() {
      configuration_ = other.configuration_ != null ? other.configuration_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttachLidarSensorRequest Clone() {
      return new AttachLidarSensorRequest(this);
    }

    /// <summary>Field number for the "configuration" field.</summary>
    public const int ConfigurationFieldNumber = 1;
    private global::SimulationApiSchema.LidarConfiguration configuration_;
    /// <summary>
    /// Configuration of the lidar sensor.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SimulationApiSchema.LidarConfiguration Configuration {
      get { return configuration_; }
      set {
        configuration_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AttachLidarSensorRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AttachLidarSensorRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Configuration, other.Configuration)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (configuration_ != null) hash ^= Configuration.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (configuration_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Configuration);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (configuration_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Configuration);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AttachLidarSensorRequest other) {
      if (other == null) {
        return;
      }
      if (other.configuration_ != null) {
        if (configuration_ == null) {
          Configuration = new global::SimulationApiSchema.LidarConfiguration();
        }
        Configuration.MergeFrom(other.Configuration);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (configuration_ == null) {
              Configuration = new global::SimulationApiSchema.LidarConfiguration();
            }
            input.ReadMessage(Configuration);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// Response of attaching a lidar sensor to the target entity.
  /// </summary>
  public sealed partial class AttachLidarSensorResponse : pb::IMessage<AttachLidarSensorResponse> {
    private static readonly pb::MessageParser<AttachLidarSensorResponse> _parser = new pb::MessageParser<AttachLidarSensorResponse>(() => new AttachLidarSensorResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AttachLidarSensorResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SimulationApiSchema.SimulationApiSchemaReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttachLidarSensorResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttachLidarSensorResponse(AttachLidarSensorResponse other) : this() {
      result_ = other.result_ != null ? other.result_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttachLidarSensorResponse Clone() {
      return new AttachLidarSensorResponse(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::SimulationApiSchema.Result result_;
    /// <summary>
    /// Result of [AttachLidarSensorRequest](#AttachLidarSensorRequest)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SimulationApiSchema.Result Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AttachLidarSensorResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AttachLidarSensorResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Result, other.Result)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (result_ != null) hash ^= Result.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (result_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (result_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AttachLidarSensorResponse other) {
      if (other == null) {
        return;
      }
      if (other.result_ != null) {
        if (result_ == null) {
          Result = new global::SimulationApiSchema.Result();
        }
        Result.MergeFrom(other.Result);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (result_ == null) {
              Result = new global::SimulationApiSchema.Result();
            }
            input.ReadMessage(Result);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// Requests attaching detection sensor to the target entity.
  /// </summary>
  public sealed partial class AttachDetectionSensorRequest : pb::IMessage<AttachDetectionSensorRequest> {
    private static readonly pb::MessageParser<AttachDetectionSensorRequest> _parser = new pb::MessageParser<AttachDetectionSensorRequest>(() => new AttachDetectionSensorRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AttachDetectionSensorRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SimulationApiSchema.SimulationApiSchemaReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttachDetectionSensorRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttachDetectionSensorRequest(AttachDetectionSensorRequest other) : this() {
      configuration_ = other.configuration_ != null ? other.configuration_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttachDetectionSensorRequest Clone() {
      return new AttachDetectionSensorRequest(this);
    }

    /// <summary>Field number for the "configuration" field.</summary>
    public const int ConfigurationFieldNumber = 1;
    private global::SimulationApiSchema.DetectionSensorConfiguration configuration_;
    /// <summary>
    /// Configuration of the detection sensor.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SimulationApiSchema.DetectionSensorConfiguration Configuration {
      get { return configuration_; }
      set {
        configuration_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AttachDetectionSensorRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AttachDetectionSensorRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Configuration, other.Configuration)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (configuration_ != null) hash ^= Configuration.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (configuration_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Configuration);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (configuration_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Configuration);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AttachDetectionSensorRequest other) {
      if (other == null) {
        return;
      }
      if (other.configuration_ != null) {
        if (configuration_ == null) {
          Configuration = new global::SimulationApiSchema.DetectionSensorConfiguration();
        }
        Configuration.MergeFrom(other.Configuration);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (configuration_ == null) {
              Configuration = new global::SimulationApiSchema.DetectionSensorConfiguration();
            }
            input.ReadMessage(Configuration);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// Response of attaching detection sensor to the target entity.
  /// </summary>
  public sealed partial class AttachDetectionSensorResponse : pb::IMessage<AttachDetectionSensorResponse> {
    private static readonly pb::MessageParser<AttachDetectionSensorResponse> _parser = new pb::MessageParser<AttachDetectionSensorResponse>(() => new AttachDetectionSensorResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AttachDetectionSensorResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SimulationApiSchema.SimulationApiSchemaReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttachDetectionSensorResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttachDetectionSensorResponse(AttachDetectionSensorResponse other) : this() {
      result_ = other.result_ != null ? other.result_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttachDetectionSensorResponse Clone() {
      return new AttachDetectionSensorResponse(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::SimulationApiSchema.Result result_;
    /// <summary>
    /// Result of [AttachDetectionSensorRequest](#AttachDetectionSensorRequest)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SimulationApiSchema.Result Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AttachDetectionSensorResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AttachDetectionSensorResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Result, other.Result)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (result_ != null) hash ^= Result.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (result_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (result_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AttachDetectionSensorResponse other) {
      if (other == null) {
        return;
      }
      if (other.result_ != null) {
        if (result_ == null) {
          Result = new global::SimulationApiSchema.Result();
        }
        Result.MergeFrom(other.Result);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (result_ == null) {
              Result = new global::SimulationApiSchema.Result();
            }
            input.ReadMessage(Result);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// Requests attaching detection sensor to the target entity.
  /// </summary>
  public sealed partial class AttachOccupancyGridSensorRequest : pb::IMessage<AttachOccupancyGridSensorRequest> {
    private static readonly pb::MessageParser<AttachOccupancyGridSensorRequest> _parser = new pb::MessageParser<AttachOccupancyGridSensorRequest>(() => new AttachOccupancyGridSensorRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AttachOccupancyGridSensorRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SimulationApiSchema.SimulationApiSchemaReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttachOccupancyGridSensorRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttachOccupancyGridSensorRequest(AttachOccupancyGridSensorRequest other) : this() {
      configuration_ = other.configuration_ != null ? other.configuration_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttachOccupancyGridSensorRequest Clone() {
      return new AttachOccupancyGridSensorRequest(this);
    }

    /// <summary>Field number for the "configuration" field.</summary>
    public const int ConfigurationFieldNumber = 1;
    private global::SimulationApiSchema.OccupancyGridSensorConfiguration configuration_;
    /// <summary>
    /// Configuration of the occupancy grid sensor.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SimulationApiSchema.OccupancyGridSensorConfiguration Configuration {
      get { return configuration_; }
      set {
        configuration_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AttachOccupancyGridSensorRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AttachOccupancyGridSensorRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Configuration, other.Configuration)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (configuration_ != null) hash ^= Configuration.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (configuration_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Configuration);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (configuration_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Configuration);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AttachOccupancyGridSensorRequest other) {
      if (other == null) {
        return;
      }
      if (other.configuration_ != null) {
        if (configuration_ == null) {
          Configuration = new global::SimulationApiSchema.OccupancyGridSensorConfiguration();
        }
        Configuration.MergeFrom(other.Configuration);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (configuration_ == null) {
              Configuration = new global::SimulationApiSchema.OccupancyGridSensorConfiguration();
            }
            input.ReadMessage(Configuration);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// Response of attaching occupancy grid sensor to the target entity.
  /// </summary>
  public sealed partial class AttachOccupancyGridSensorResponse : pb::IMessage<AttachOccupancyGridSensorResponse> {
    private static readonly pb::MessageParser<AttachOccupancyGridSensorResponse> _parser = new pb::MessageParser<AttachOccupancyGridSensorResponse>(() => new AttachOccupancyGridSensorResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AttachOccupancyGridSensorResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SimulationApiSchema.SimulationApiSchemaReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttachOccupancyGridSensorResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttachOccupancyGridSensorResponse(AttachOccupancyGridSensorResponse other) : this() {
      result_ = other.result_ != null ? other.result_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttachOccupancyGridSensorResponse Clone() {
      return new AttachOccupancyGridSensorResponse(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::SimulationApiSchema.Result result_;
    /// <summary>
    /// Result of [AttachOccupancyGridSensorRequest](#AttachOccupancyGridRequest)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SimulationApiSchema.Result Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AttachOccupancyGridSensorResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AttachOccupancyGridSensorResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Result, other.Result)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (result_ != null) hash ^= Result.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (result_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (result_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AttachOccupancyGridSensorResponse other) {
      if (other == null) {
        return;
      }
      if (other.result_ != null) {
        if (result_ == null) {
          Result = new global::SimulationApiSchema.Result();
        }
        Result.MergeFrom(other.Result);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (result_ == null) {
              Result = new global::SimulationApiSchema.Result();
            }
            input.ReadMessage(Result);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TrafficLight : pb::IMessage<TrafficLight> {
    private static readonly pb::MessageParser<TrafficLight> _parser = new pb::MessageParser<TrafficLight>(() => new TrafficLight());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrafficLight> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SimulationApiSchema.SimulationApiSchemaReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrafficLight() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrafficLight(TrafficLight other) : this() {
      color_ = other.color_;
      shape_ = other.shape_;
      status_ = other.status_;
      confidence_ = other.confidence_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrafficLight Clone() {
      return new TrafficLight(this);
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 1;
    private global::SimulationApiSchema.TrafficLight.Types.Color color_ = global::SimulationApiSchema.TrafficLight.Types.Color.Red;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SimulationApiSchema.TrafficLight.Types.Color Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    /// <summary>Field number for the "shape" field.</summary>
    public const int ShapeFieldNumber = 2;
    private global::SimulationApiSchema.TrafficLight.Types.Shape shape_ = global::SimulationApiSchema.TrafficLight.Types.Shape.Circle;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SimulationApiSchema.TrafficLight.Types.Shape Shape {
      get { return shape_; }
      set {
        shape_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private global::SimulationApiSchema.TrafficLight.Types.Status status_ = global::SimulationApiSchema.TrafficLight.Types.Status.SolidOff;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SimulationApiSchema.TrafficLight.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "confidence" field.</summary>
    public const int ConfidenceFieldNumber = 4;
    private float confidence_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Confidence {
      get { return confidence_; }
      set {
        confidence_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrafficLight);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrafficLight other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Color != other.Color) return false;
      if (Shape != other.Shape) return false;
      if (Status != other.Status) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Confidence, other.Confidence)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Color != global::SimulationApiSchema.TrafficLight.Types.Color.Red) hash ^= Color.GetHashCode();
      if (Shape != global::SimulationApiSchema.TrafficLight.Types.Shape.Circle) hash ^= Shape.GetHashCode();
      if (Status != global::SimulationApiSchema.TrafficLight.Types.Status.SolidOff) hash ^= Status.GetHashCode();
      if (Confidence != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Confidence);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Color != global::SimulationApiSchema.TrafficLight.Types.Color.Red) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Color);
      }
      if (Shape != global::SimulationApiSchema.TrafficLight.Types.Shape.Circle) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Shape);
      }
      if (Status != global::SimulationApiSchema.TrafficLight.Types.Status.SolidOff) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Status);
      }
      if (Confidence != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Confidence);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Color != global::SimulationApiSchema.TrafficLight.Types.Color.Red) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Color);
      }
      if (Shape != global::SimulationApiSchema.TrafficLight.Types.Shape.Circle) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Shape);
      }
      if (Status != global::SimulationApiSchema.TrafficLight.Types.Status.SolidOff) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (Confidence != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrafficLight other) {
      if (other == null) {
        return;
      }
      if (other.Color != global::SimulationApiSchema.TrafficLight.Types.Color.Red) {
        Color = other.Color;
      }
      if (other.Shape != global::SimulationApiSchema.TrafficLight.Types.Shape.Circle) {
        Shape = other.Shape;
      }
      if (other.Status != global::SimulationApiSchema.TrafficLight.Types.Status.SolidOff) {
        Status = other.Status;
      }
      if (other.Confidence != 0F) {
        Confidence = other.Confidence;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Color = (global::SimulationApiSchema.TrafficLight.Types.Color) input.ReadEnum();
            break;
          }
          case 16: {
            Shape = (global::SimulationApiSchema.TrafficLight.Types.Shape) input.ReadEnum();
            break;
          }
          case 24: {
            Status = (global::SimulationApiSchema.TrafficLight.Types.Status) input.ReadEnum();
            break;
          }
          case 37: {
            Confidence = input.ReadFloat();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TrafficLight message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Color {
        [pbr::OriginalName("RED")] Red = 0,
        [pbr::OriginalName("AMBER")] Amber = 1,
        [pbr::OriginalName("GREEN")] Green = 2,
        [pbr::OriginalName("WHITE")] White = 3,
        [pbr::OriginalName("UNKNOWN_COLOR")] UnknownColor = 4,
      }

      public enum Shape {
        [pbr::OriginalName("CIRCLE")] Circle = 0,
        [pbr::OriginalName("LEFT_ARROW")] LeftArrow = 1,
        [pbr::OriginalName("RIGHT_ARROW")] RightArrow = 2,
        [pbr::OriginalName("UP_ARROW")] UpArrow = 3,
        [pbr::OriginalName("UP_LEFT_ARROW")] UpLeftArrow = 4,
        [pbr::OriginalName("UP_RIGHT_ARROW")] UpRightArrow = 5,
        [pbr::OriginalName("DOWN_ARROW")] DownArrow = 6,
        [pbr::OriginalName("DOWN_LEFT_ARROW")] DownLeftArrow = 7,
        [pbr::OriginalName("DOWN_RIGHT_ARROW")] DownRightArrow = 8,
        [pbr::OriginalName("CROSS")] Cross = 9,
        [pbr::OriginalName("UNKNOWN_SHAPE")] UnknownShape = 10,
      }

      public enum Status {
        [pbr::OriginalName("SOLID_OFF")] SolidOff = 0,
        [pbr::OriginalName("SOLID_ON")] SolidOn = 1,
        [pbr::OriginalName("FLASHING")] Flashing = 2,
        [pbr::OriginalName("UNKNOWN_STATUS")] UnknownStatus = 3,
      }

    }
    #endregion

  }

  public sealed partial class TrafficSignal : pb::IMessage<TrafficSignal> {
    private static readonly pb::MessageParser<TrafficSignal> _parser = new pb::MessageParser<TrafficSignal>(() => new TrafficSignal());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrafficSignal> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SimulationApiSchema.SimulationApiSchemaReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrafficSignal() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrafficSignal(TrafficSignal other) : this() {
      id_ = other.id_;
      trafficLightStatus_ = other.trafficLightStatus_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrafficSignal Clone() {
      return new TrafficSignal(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "traffic_light_status" field.</summary>
    public const int TrafficLightStatusFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SimulationApiSchema.TrafficLight> _repeated_trafficLightStatus_codec
        = pb::FieldCodec.ForMessage(18, global::SimulationApiSchema.TrafficLight.Parser);
    private readonly pbc::RepeatedField<global::SimulationApiSchema.TrafficLight> trafficLightStatus_ = new pbc::RepeatedField<global::SimulationApiSchema.TrafficLight>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SimulationApiSchema.TrafficLight> TrafficLightStatus {
      get { return trafficLightStatus_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrafficSignal);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrafficSignal other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!trafficLightStatus_.Equals(other.trafficLightStatus_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      hash ^= trafficLightStatus_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      trafficLightStatus_.WriteTo(output, _repeated_trafficLightStatus_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      size += trafficLightStatus_.CalculateSize(_repeated_trafficLightStatus_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrafficSignal other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      trafficLightStatus_.Add(other.trafficLightStatus_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            trafficLightStatus_.AddEntriesFrom(input, _repeated_trafficLightStatus_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// Requests updating traffic lights in simulation.
  /// </summary>
  public sealed partial class UpdateTrafficLightsRequest : pb::IMessage<UpdateTrafficLightsRequest> {
    private static readonly pb::MessageParser<UpdateTrafficLightsRequest> _parser = new pb::MessageParser<UpdateTrafficLightsRequest>(() => new UpdateTrafficLightsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateTrafficLightsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SimulationApiSchema.SimulationApiSchemaReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateTrafficLightsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateTrafficLightsRequest(UpdateTrafficLightsRequest other) : this() {
      states_ = other.states_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateTrafficLightsRequest Clone() {
      return new UpdateTrafficLightsRequest(this);
    }

    /// <summary>Field number for the "states" field.</summary>
    public const int StatesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SimulationApiSchema.TrafficSignal> _repeated_states_codec
        = pb::FieldCodec.ForMessage(10, global::SimulationApiSchema.TrafficSignal.Parser);
    private readonly pbc::RepeatedField<global::SimulationApiSchema.TrafficSignal> states_ = new pbc::RepeatedField<global::SimulationApiSchema.TrafficSignal>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SimulationApiSchema.TrafficSignal> States {
      get { return states_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateTrafficLightsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateTrafficLightsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!states_.Equals(other.states_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= states_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      states_.WriteTo(output, _repeated_states_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += states_.CalculateSize(_repeated_states_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateTrafficLightsRequest other) {
      if (other == null) {
        return;
      }
      states_.Add(other.states_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            states_.AddEntriesFrom(input, _repeated_states_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// Response of updating traffic lights in simulation.
  /// </summary>
  public sealed partial class UpdateTrafficLightsResponse : pb::IMessage<UpdateTrafficLightsResponse> {
    private static readonly pb::MessageParser<UpdateTrafficLightsResponse> _parser = new pb::MessageParser<UpdateTrafficLightsResponse>(() => new UpdateTrafficLightsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateTrafficLightsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SimulationApiSchema.SimulationApiSchemaReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateTrafficLightsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateTrafficLightsResponse(UpdateTrafficLightsResponse other) : this() {
      result_ = other.result_ != null ? other.result_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateTrafficLightsResponse Clone() {
      return new UpdateTrafficLightsResponse(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::SimulationApiSchema.Result result_;
    /// <summary>
    /// Result of [DespawnEntityRequest](#DespawnEntityRequest)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SimulationApiSchema.Result Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateTrafficLightsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateTrafficLightsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Result, other.Result)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (result_ != null) hash ^= Result.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (result_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (result_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateTrafficLightsResponse other) {
      if (other == null) {
        return;
      }
      if (other.result_ != null) {
        if (result_ == null) {
          Result = new global::SimulationApiSchema.Result();
        }
        Result.MergeFrom(other.Result);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (result_ == null) {
              Result = new global::SimulationApiSchema.Result();
            }
            input.ReadMessage(Result);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// Request to make an entity follow a trajectory.
  /// </summary>
  public sealed partial class FollowPolylineTrajectoryRequest : pb::IMessage<FollowPolylineTrajectoryRequest> {
    private static readonly pb::MessageParser<FollowPolylineTrajectoryRequest> _parser = new pb::MessageParser<FollowPolylineTrajectoryRequest>(() => new FollowPolylineTrajectoryRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FollowPolylineTrajectoryRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SimulationApiSchema.SimulationApiSchemaReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FollowPolylineTrajectoryRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FollowPolylineTrajectoryRequest(FollowPolylineTrajectoryRequest other) : this() {
      name_ = other.name_;
      trajectory_ = other.trajectory_ != null ? other.trajectory_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FollowPolylineTrajectoryRequest Clone() {
      return new FollowPolylineTrajectoryRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "trajectory" field.</summary>
    public const int TrajectoryFieldNumber = 2;
    private global::TrafficSimulatorMsgs.PolylineTrajectory trajectory_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TrafficSimulatorMsgs.PolylineTrajectory Trajectory {
      get { return trajectory_; }
      set {
        trajectory_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FollowPolylineTrajectoryRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FollowPolylineTrajectoryRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!object.Equals(Trajectory, other.Trajectory)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (trajectory_ != null) hash ^= Trajectory.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (trajectory_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Trajectory);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (trajectory_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Trajectory);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FollowPolylineTrajectoryRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.trajectory_ != null) {
        if (trajectory_ == null) {
          Trajectory = new global::TrafficSimulatorMsgs.PolylineTrajectory();
        }
        Trajectory.MergeFrom(other.Trajectory);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            if (trajectory_ == null) {
              Trajectory = new global::TrafficSimulatorMsgs.PolylineTrajectory();
            }
            input.ReadMessage(Trajectory);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// Response whether the entity's trajectory following request has been accepted.
  /// </summary>
  public sealed partial class FollowPolylineTrajectoryResponse : pb::IMessage<FollowPolylineTrajectoryResponse> {
    private static readonly pb::MessageParser<FollowPolylineTrajectoryResponse> _parser = new pb::MessageParser<FollowPolylineTrajectoryResponse>(() => new FollowPolylineTrajectoryResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FollowPolylineTrajectoryResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SimulationApiSchema.SimulationApiSchemaReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FollowPolylineTrajectoryResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FollowPolylineTrajectoryResponse(FollowPolylineTrajectoryResponse other) : this() {
      result_ = other.result_ != null ? other.result_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FollowPolylineTrajectoryResponse Clone() {
      return new FollowPolylineTrajectoryResponse(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::SimulationApiSchema.Result result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SimulationApiSchema.Result Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FollowPolylineTrajectoryResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FollowPolylineTrajectoryResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Result, other.Result)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (result_ != null) hash ^= Result.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (result_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (result_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FollowPolylineTrajectoryResponse other) {
      if (other == null) {
        return;
      }
      if (other.result_ != null) {
        if (result_ == null) {
          Result = new global::SimulationApiSchema.Result();
        }
        Result.MergeFrom(other.Result);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (result_ == null) {
              Result = new global::SimulationApiSchema.Result();
            }
            input.ReadMessage(Result);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// Universal message for Request
  /// </summary>
  public sealed partial class SimulationRequest : pb::IMessage<SimulationRequest> {
    private static readonly pb::MessageParser<SimulationRequest> _parser = new pb::MessageParser<SimulationRequest>(() => new SimulationRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SimulationRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SimulationApiSchema.SimulationApiSchemaReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimulationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimulationRequest(SimulationRequest other) : this() {
      switch (other.RequestCase) {
        case RequestOneofCase.Initialize:
          Initialize = other.Initialize.Clone();
          break;
        case RequestOneofCase.UpdateFrame:
          UpdateFrame = other.UpdateFrame.Clone();
          break;
        case RequestOneofCase.SpawnVehicleEntity:
          SpawnVehicleEntity = other.SpawnVehicleEntity.Clone();
          break;
        case RequestOneofCase.SpawnPedestrianEntity:
          SpawnPedestrianEntity = other.SpawnPedestrianEntity.Clone();
          break;
        case RequestOneofCase.SpawnMiscObjectEntity:
          SpawnMiscObjectEntity = other.SpawnMiscObjectEntity.Clone();
          break;
        case RequestOneofCase.DespawnEntity:
          DespawnEntity = other.DespawnEntity.Clone();
          break;
        case RequestOneofCase.UpdateEntityStatus:
          UpdateEntityStatus = other.UpdateEntityStatus.Clone();
          break;
        case RequestOneofCase.AttachLidarSensor:
          AttachLidarSensor = other.AttachLidarSensor.Clone();
          break;
        case RequestOneofCase.AttachDetectionSensor:
          AttachDetectionSensor = other.AttachDetectionSensor.Clone();
          break;
        case RequestOneofCase.AttachOccupancyGridSensor:
          AttachOccupancyGridSensor = other.AttachOccupancyGridSensor.Clone();
          break;
        case RequestOneofCase.UpdateTrafficLights:
          UpdateTrafficLights = other.UpdateTrafficLights.Clone();
          break;
        case RequestOneofCase.FollowPolylineTrajectory:
          FollowPolylineTrajectory = other.FollowPolylineTrajectory.Clone();
          break;
        case RequestOneofCase.AttachPseudoTrafficLightDetector:
          AttachPseudoTrafficLightDetector = other.AttachPseudoTrafficLightDetector.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimulationRequest Clone() {
      return new SimulationRequest(this);
    }

    /// <summary>Field number for the "initialize" field.</summary>
    public const int InitializeFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SimulationApiSchema.InitializeRequest Initialize {
      get { return requestCase_ == RequestOneofCase.Initialize ? (global::SimulationApiSchema.InitializeRequest) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.Initialize;
      }
    }

    /// <summary>Field number for the "update_frame" field.</summary>
    public const int UpdateFrameFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SimulationApiSchema.UpdateFrameRequest UpdateFrame {
      get { return requestCase_ == RequestOneofCase.UpdateFrame ? (global::SimulationApiSchema.UpdateFrameRequest) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.UpdateFrame;
      }
    }

    /// <summary>Field number for the "spawn_vehicle_entity" field.</summary>
    public const int SpawnVehicleEntityFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SimulationApiSchema.SpawnVehicleEntityRequest SpawnVehicleEntity {
      get { return requestCase_ == RequestOneofCase.SpawnVehicleEntity ? (global::SimulationApiSchema.SpawnVehicleEntityRequest) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.SpawnVehicleEntity;
      }
    }

    /// <summary>Field number for the "spawn_pedestrian_entity" field.</summary>
    public const int SpawnPedestrianEntityFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SimulationApiSchema.SpawnPedestrianEntityRequest SpawnPedestrianEntity {
      get { return requestCase_ == RequestOneofCase.SpawnPedestrianEntity ? (global::SimulationApiSchema.SpawnPedestrianEntityRequest) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.SpawnPedestrianEntity;
      }
    }

    /// <summary>Field number for the "spawn_misc_object_entity" field.</summary>
    public const int SpawnMiscObjectEntityFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SimulationApiSchema.SpawnMiscObjectEntityRequest SpawnMiscObjectEntity {
      get { return requestCase_ == RequestOneofCase.SpawnMiscObjectEntity ? (global::SimulationApiSchema.SpawnMiscObjectEntityRequest) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.SpawnMiscObjectEntity;
      }
    }

    /// <summary>Field number for the "despawn_entity" field.</summary>
    public const int DespawnEntityFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SimulationApiSchema.DespawnEntityRequest DespawnEntity {
      get { return requestCase_ == RequestOneofCase.DespawnEntity ? (global::SimulationApiSchema.DespawnEntityRequest) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.DespawnEntity;
      }
    }

    /// <summary>Field number for the "update_entity_status" field.</summary>
    public const int UpdateEntityStatusFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SimulationApiSchema.UpdateEntityStatusRequest UpdateEntityStatus {
      get { return requestCase_ == RequestOneofCase.UpdateEntityStatus ? (global::SimulationApiSchema.UpdateEntityStatusRequest) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.UpdateEntityStatus;
      }
    }

    /// <summary>Field number for the "attach_lidar_sensor" field.</summary>
    public const int AttachLidarSensorFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SimulationApiSchema.AttachLidarSensorRequest AttachLidarSensor {
      get { return requestCase_ == RequestOneofCase.AttachLidarSensor ? (global::SimulationApiSchema.AttachLidarSensorRequest) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.AttachLidarSensor;
      }
    }

    /// <summary>Field number for the "attach_detection_sensor" field.</summary>
    public const int AttachDetectionSensorFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SimulationApiSchema.AttachDetectionSensorRequest AttachDetectionSensor {
      get { return requestCase_ == RequestOneofCase.AttachDetectionSensor ? (global::SimulationApiSchema.AttachDetectionSensorRequest) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.AttachDetectionSensor;
      }
    }

    /// <summary>Field number for the "attach_occupancy_grid_sensor" field.</summary>
    public const int AttachOccupancyGridSensorFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SimulationApiSchema.AttachOccupancyGridSensorRequest AttachOccupancyGridSensor {
      get { return requestCase_ == RequestOneofCase.AttachOccupancyGridSensor ? (global::SimulationApiSchema.AttachOccupancyGridSensorRequest) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.AttachOccupancyGridSensor;
      }
    }

    /// <summary>Field number for the "update_traffic_lights" field.</summary>
    public const int UpdateTrafficLightsFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SimulationApiSchema.UpdateTrafficLightsRequest UpdateTrafficLights {
      get { return requestCase_ == RequestOneofCase.UpdateTrafficLights ? (global::SimulationApiSchema.UpdateTrafficLightsRequest) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.UpdateTrafficLights;
      }
    }

    /// <summary>Field number for the "follow_polyline_trajectory" field.</summary>
    public const int FollowPolylineTrajectoryFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SimulationApiSchema.FollowPolylineTrajectoryRequest FollowPolylineTrajectory {
      get { return requestCase_ == RequestOneofCase.FollowPolylineTrajectory ? (global::SimulationApiSchema.FollowPolylineTrajectoryRequest) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.FollowPolylineTrajectory;
      }
    }

    /// <summary>Field number for the "attach_pseudo_traffic_light_detector" field.</summary>
    public const int AttachPseudoTrafficLightDetectorFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SimulationApiSchema.AttachPseudoTrafficLightDetectorRequest AttachPseudoTrafficLightDetector {
      get { return requestCase_ == RequestOneofCase.AttachPseudoTrafficLightDetector ? (global::SimulationApiSchema.AttachPseudoTrafficLightDetectorRequest) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.AttachPseudoTrafficLightDetector;
      }
    }

    private object request_;
    /// <summary>Enum of possible cases for the "request" oneof.</summary>
    public enum RequestOneofCase {
      None = 0,
      Initialize = 1,
      UpdateFrame = 2,
      SpawnVehicleEntity = 3,
      SpawnPedestrianEntity = 4,
      SpawnMiscObjectEntity = 5,
      DespawnEntity = 6,
      UpdateEntityStatus = 7,
      AttachLidarSensor = 8,
      AttachDetectionSensor = 9,
      AttachOccupancyGridSensor = 10,
      UpdateTrafficLights = 11,
      FollowPolylineTrajectory = 12,
      AttachPseudoTrafficLightDetector = 13,
    }
    private RequestOneofCase requestCase_ = RequestOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestOneofCase RequestCase {
      get { return requestCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequest() {
      requestCase_ = RequestOneofCase.None;
      request_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SimulationRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SimulationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Initialize, other.Initialize)) return false;
      if (!object.Equals(UpdateFrame, other.UpdateFrame)) return false;
      if (!object.Equals(SpawnVehicleEntity, other.SpawnVehicleEntity)) return false;
      if (!object.Equals(SpawnPedestrianEntity, other.SpawnPedestrianEntity)) return false;
      if (!object.Equals(SpawnMiscObjectEntity, other.SpawnMiscObjectEntity)) return false;
      if (!object.Equals(DespawnEntity, other.DespawnEntity)) return false;
      if (!object.Equals(UpdateEntityStatus, other.UpdateEntityStatus)) return false;
      if (!object.Equals(AttachLidarSensor, other.AttachLidarSensor)) return false;
      if (!object.Equals(AttachDetectionSensor, other.AttachDetectionSensor)) return false;
      if (!object.Equals(AttachOccupancyGridSensor, other.AttachOccupancyGridSensor)) return false;
      if (!object.Equals(UpdateTrafficLights, other.UpdateTrafficLights)) return false;
      if (!object.Equals(FollowPolylineTrajectory, other.FollowPolylineTrajectory)) return false;
      if (!object.Equals(AttachPseudoTrafficLightDetector, other.AttachPseudoTrafficLightDetector)) return false;
      if (RequestCase != other.RequestCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (requestCase_ == RequestOneofCase.Initialize) hash ^= Initialize.GetHashCode();
      if (requestCase_ == RequestOneofCase.UpdateFrame) hash ^= UpdateFrame.GetHashCode();
      if (requestCase_ == RequestOneofCase.SpawnVehicleEntity) hash ^= SpawnVehicleEntity.GetHashCode();
      if (requestCase_ == RequestOneofCase.SpawnPedestrianEntity) hash ^= SpawnPedestrianEntity.GetHashCode();
      if (requestCase_ == RequestOneofCase.SpawnMiscObjectEntity) hash ^= SpawnMiscObjectEntity.GetHashCode();
      if (requestCase_ == RequestOneofCase.DespawnEntity) hash ^= DespawnEntity.GetHashCode();
      if (requestCase_ == RequestOneofCase.UpdateEntityStatus) hash ^= UpdateEntityStatus.GetHashCode();
      if (requestCase_ == RequestOneofCase.AttachLidarSensor) hash ^= AttachLidarSensor.GetHashCode();
      if (requestCase_ == RequestOneofCase.AttachDetectionSensor) hash ^= AttachDetectionSensor.GetHashCode();
      if (requestCase_ == RequestOneofCase.AttachOccupancyGridSensor) hash ^= AttachOccupancyGridSensor.GetHashCode();
      if (requestCase_ == RequestOneofCase.UpdateTrafficLights) hash ^= UpdateTrafficLights.GetHashCode();
      if (requestCase_ == RequestOneofCase.FollowPolylineTrajectory) hash ^= FollowPolylineTrajectory.GetHashCode();
      if (requestCase_ == RequestOneofCase.AttachPseudoTrafficLightDetector) hash ^= AttachPseudoTrafficLightDetector.GetHashCode();
      hash ^= (int) requestCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (requestCase_ == RequestOneofCase.Initialize) {
        output.WriteRawTag(10);
        output.WriteMessage(Initialize);
      }
      if (requestCase_ == RequestOneofCase.UpdateFrame) {
        output.WriteRawTag(18);
        output.WriteMessage(UpdateFrame);
      }
      if (requestCase_ == RequestOneofCase.SpawnVehicleEntity) {
        output.WriteRawTag(26);
        output.WriteMessage(SpawnVehicleEntity);
      }
      if (requestCase_ == RequestOneofCase.SpawnPedestrianEntity) {
        output.WriteRawTag(34);
        output.WriteMessage(SpawnPedestrianEntity);
      }
      if (requestCase_ == RequestOneofCase.SpawnMiscObjectEntity) {
        output.WriteRawTag(42);
        output.WriteMessage(SpawnMiscObjectEntity);
      }
      if (requestCase_ == RequestOneofCase.DespawnEntity) {
        output.WriteRawTag(50);
        output.WriteMessage(DespawnEntity);
      }
      if (requestCase_ == RequestOneofCase.UpdateEntityStatus) {
        output.WriteRawTag(58);
        output.WriteMessage(UpdateEntityStatus);
      }
      if (requestCase_ == RequestOneofCase.AttachLidarSensor) {
        output.WriteRawTag(66);
        output.WriteMessage(AttachLidarSensor);
      }
      if (requestCase_ == RequestOneofCase.AttachDetectionSensor) {
        output.WriteRawTag(74);
        output.WriteMessage(AttachDetectionSensor);
      }
      if (requestCase_ == RequestOneofCase.AttachOccupancyGridSensor) {
        output.WriteRawTag(82);
        output.WriteMessage(AttachOccupancyGridSensor);
      }
      if (requestCase_ == RequestOneofCase.UpdateTrafficLights) {
        output.WriteRawTag(90);
        output.WriteMessage(UpdateTrafficLights);
      }
      if (requestCase_ == RequestOneofCase.FollowPolylineTrajectory) {
        output.WriteRawTag(98);
        output.WriteMessage(FollowPolylineTrajectory);
      }
      if (requestCase_ == RequestOneofCase.AttachPseudoTrafficLightDetector) {
        output.WriteRawTag(106);
        output.WriteMessage(AttachPseudoTrafficLightDetector);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (requestCase_ == RequestOneofCase.Initialize) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Initialize);
      }
      if (requestCase_ == RequestOneofCase.UpdateFrame) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateFrame);
      }
      if (requestCase_ == RequestOneofCase.SpawnVehicleEntity) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SpawnVehicleEntity);
      }
      if (requestCase_ == RequestOneofCase.SpawnPedestrianEntity) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SpawnPedestrianEntity);
      }
      if (requestCase_ == RequestOneofCase.SpawnMiscObjectEntity) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SpawnMiscObjectEntity);
      }
      if (requestCase_ == RequestOneofCase.DespawnEntity) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DespawnEntity);
      }
      if (requestCase_ == RequestOneofCase.UpdateEntityStatus) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateEntityStatus);
      }
      if (requestCase_ == RequestOneofCase.AttachLidarSensor) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AttachLidarSensor);
      }
      if (requestCase_ == RequestOneofCase.AttachDetectionSensor) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AttachDetectionSensor);
      }
      if (requestCase_ == RequestOneofCase.AttachOccupancyGridSensor) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AttachOccupancyGridSensor);
      }
      if (requestCase_ == RequestOneofCase.UpdateTrafficLights) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateTrafficLights);
      }
      if (requestCase_ == RequestOneofCase.FollowPolylineTrajectory) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FollowPolylineTrajectory);
      }
      if (requestCase_ == RequestOneofCase.AttachPseudoTrafficLightDetector) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AttachPseudoTrafficLightDetector);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SimulationRequest other) {
      if (other == null) {
        return;
      }
      switch (other.RequestCase) {
        case RequestOneofCase.Initialize:
          if (Initialize == null) {
            Initialize = new global::SimulationApiSchema.InitializeRequest();
          }
          Initialize.MergeFrom(other.Initialize);
          break;
        case RequestOneofCase.UpdateFrame:
          if (UpdateFrame == null) {
            UpdateFrame = new global::SimulationApiSchema.UpdateFrameRequest();
          }
          UpdateFrame.MergeFrom(other.UpdateFrame);
          break;
        case RequestOneofCase.SpawnVehicleEntity:
          if (SpawnVehicleEntity == null) {
            SpawnVehicleEntity = new global::SimulationApiSchema.SpawnVehicleEntityRequest();
          }
          SpawnVehicleEntity.MergeFrom(other.SpawnVehicleEntity);
          break;
        case RequestOneofCase.SpawnPedestrianEntity:
          if (SpawnPedestrianEntity == null) {
            SpawnPedestrianEntity = new global::SimulationApiSchema.SpawnPedestrianEntityRequest();
          }
          SpawnPedestrianEntity.MergeFrom(other.SpawnPedestrianEntity);
          break;
        case RequestOneofCase.SpawnMiscObjectEntity:
          if (SpawnMiscObjectEntity == null) {
            SpawnMiscObjectEntity = new global::SimulationApiSchema.SpawnMiscObjectEntityRequest();
          }
          SpawnMiscObjectEntity.MergeFrom(other.SpawnMiscObjectEntity);
          break;
        case RequestOneofCase.DespawnEntity:
          if (DespawnEntity == null) {
            DespawnEntity = new global::SimulationApiSchema.DespawnEntityRequest();
          }
          DespawnEntity.MergeFrom(other.DespawnEntity);
          break;
        case RequestOneofCase.UpdateEntityStatus:
          if (UpdateEntityStatus == null) {
            UpdateEntityStatus = new global::SimulationApiSchema.UpdateEntityStatusRequest();
          }
          UpdateEntityStatus.MergeFrom(other.UpdateEntityStatus);
          break;
        case RequestOneofCase.AttachLidarSensor:
          if (AttachLidarSensor == null) {
            AttachLidarSensor = new global::SimulationApiSchema.AttachLidarSensorRequest();
          }
          AttachLidarSensor.MergeFrom(other.AttachLidarSensor);
          break;
        case RequestOneofCase.AttachDetectionSensor:
          if (AttachDetectionSensor == null) {
            AttachDetectionSensor = new global::SimulationApiSchema.AttachDetectionSensorRequest();
          }
          AttachDetectionSensor.MergeFrom(other.AttachDetectionSensor);
          break;
        case RequestOneofCase.AttachOccupancyGridSensor:
          if (AttachOccupancyGridSensor == null) {
            AttachOccupancyGridSensor = new global::SimulationApiSchema.AttachOccupancyGridSensorRequest();
          }
          AttachOccupancyGridSensor.MergeFrom(other.AttachOccupancyGridSensor);
          break;
        case RequestOneofCase.UpdateTrafficLights:
          if (UpdateTrafficLights == null) {
            UpdateTrafficLights = new global::SimulationApiSchema.UpdateTrafficLightsRequest();
          }
          UpdateTrafficLights.MergeFrom(other.UpdateTrafficLights);
          break;
        case RequestOneofCase.FollowPolylineTrajectory:
          if (FollowPolylineTrajectory == null) {
            FollowPolylineTrajectory = new global::SimulationApiSchema.FollowPolylineTrajectoryRequest();
          }
          FollowPolylineTrajectory.MergeFrom(other.FollowPolylineTrajectory);
          break;
        case RequestOneofCase.AttachPseudoTrafficLightDetector:
          if (AttachPseudoTrafficLightDetector == null) {
            AttachPseudoTrafficLightDetector = new global::SimulationApiSchema.AttachPseudoTrafficLightDetectorRequest();
          }
          AttachPseudoTrafficLightDetector.MergeFrom(other.AttachPseudoTrafficLightDetector);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::SimulationApiSchema.InitializeRequest subBuilder = new global::SimulationApiSchema.InitializeRequest();
            if (requestCase_ == RequestOneofCase.Initialize) {
              subBuilder.MergeFrom(Initialize);
            }
            input.ReadMessage(subBuilder);
            Initialize = subBuilder;
            break;
          }
          case 18: {
            global::SimulationApiSchema.UpdateFrameRequest subBuilder = new global::SimulationApiSchema.UpdateFrameRequest();
            if (requestCase_ == RequestOneofCase.UpdateFrame) {
              subBuilder.MergeFrom(UpdateFrame);
            }
            input.ReadMessage(subBuilder);
            UpdateFrame = subBuilder;
            break;
          }
          case 26: {
            global::SimulationApiSchema.SpawnVehicleEntityRequest subBuilder = new global::SimulationApiSchema.SpawnVehicleEntityRequest();
            if (requestCase_ == RequestOneofCase.SpawnVehicleEntity) {
              subBuilder.MergeFrom(SpawnVehicleEntity);
            }
            input.ReadMessage(subBuilder);
            SpawnVehicleEntity = subBuilder;
            break;
          }
          case 34: {
            global::SimulationApiSchema.SpawnPedestrianEntityRequest subBuilder = new global::SimulationApiSchema.SpawnPedestrianEntityRequest();
            if (requestCase_ == RequestOneofCase.SpawnPedestrianEntity) {
              subBuilder.MergeFrom(SpawnPedestrianEntity);
            }
            input.ReadMessage(subBuilder);
            SpawnPedestrianEntity = subBuilder;
            break;
          }
          case 42: {
            global::SimulationApiSchema.SpawnMiscObjectEntityRequest subBuilder = new global::SimulationApiSchema.SpawnMiscObjectEntityRequest();
            if (requestCase_ == RequestOneofCase.SpawnMiscObjectEntity) {
              subBuilder.MergeFrom(SpawnMiscObjectEntity);
            }
            input.ReadMessage(subBuilder);
            SpawnMiscObjectEntity = subBuilder;
            break;
          }
          case 50: {
            global::SimulationApiSchema.DespawnEntityRequest subBuilder = new global::SimulationApiSchema.DespawnEntityRequest();
            if (requestCase_ == RequestOneofCase.DespawnEntity) {
              subBuilder.MergeFrom(DespawnEntity);
            }
            input.ReadMessage(subBuilder);
            DespawnEntity = subBuilder;
            break;
          }
          case 58: {
            global::SimulationApiSchema.UpdateEntityStatusRequest subBuilder = new global::SimulationApiSchema.UpdateEntityStatusRequest();
            if (requestCase_ == RequestOneofCase.UpdateEntityStatus) {
              subBuilder.MergeFrom(UpdateEntityStatus);
            }
            input.ReadMessage(subBuilder);
            UpdateEntityStatus = subBuilder;
            break;
          }
          case 66: {
            global::SimulationApiSchema.AttachLidarSensorRequest subBuilder = new global::SimulationApiSchema.AttachLidarSensorRequest();
            if (requestCase_ == RequestOneofCase.AttachLidarSensor) {
              subBuilder.MergeFrom(AttachLidarSensor);
            }
            input.ReadMessage(subBuilder);
            AttachLidarSensor = subBuilder;
            break;
          }
          case 74: {
            global::SimulationApiSchema.AttachDetectionSensorRequest subBuilder = new global::SimulationApiSchema.AttachDetectionSensorRequest();
            if (requestCase_ == RequestOneofCase.AttachDetectionSensor) {
              subBuilder.MergeFrom(AttachDetectionSensor);
            }
            input.ReadMessage(subBuilder);
            AttachDetectionSensor = subBuilder;
            break;
          }
          case 82: {
            global::SimulationApiSchema.AttachOccupancyGridSensorRequest subBuilder = new global::SimulationApiSchema.AttachOccupancyGridSensorRequest();
            if (requestCase_ == RequestOneofCase.AttachOccupancyGridSensor) {
              subBuilder.MergeFrom(AttachOccupancyGridSensor);
            }
            input.ReadMessage(subBuilder);
            AttachOccupancyGridSensor = subBuilder;
            break;
          }
          case 90: {
            global::SimulationApiSchema.UpdateTrafficLightsRequest subBuilder = new global::SimulationApiSchema.UpdateTrafficLightsRequest();
            if (requestCase_ == RequestOneofCase.UpdateTrafficLights) {
              subBuilder.MergeFrom(UpdateTrafficLights);
            }
            input.ReadMessage(subBuilder);
            UpdateTrafficLights = subBuilder;
            break;
          }
          case 98: {
            global::SimulationApiSchema.FollowPolylineTrajectoryRequest subBuilder = new global::SimulationApiSchema.FollowPolylineTrajectoryRequest();
            if (requestCase_ == RequestOneofCase.FollowPolylineTrajectory) {
              subBuilder.MergeFrom(FollowPolylineTrajectory);
            }
            input.ReadMessage(subBuilder);
            FollowPolylineTrajectory = subBuilder;
            break;
          }
          case 106: {
            global::SimulationApiSchema.AttachPseudoTrafficLightDetectorRequest subBuilder = new global::SimulationApiSchema.AttachPseudoTrafficLightDetectorRequest();
            if (requestCase_ == RequestOneofCase.AttachPseudoTrafficLightDetector) {
              subBuilder.MergeFrom(AttachPseudoTrafficLightDetector);
            }
            input.ReadMessage(subBuilder);
            AttachPseudoTrafficLightDetector = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// Universal message for Response
  /// </summary>
  public sealed partial class SimulationResponse : pb::IMessage<SimulationResponse> {
    private static readonly pb::MessageParser<SimulationResponse> _parser = new pb::MessageParser<SimulationResponse>(() => new SimulationResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SimulationResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SimulationApiSchema.SimulationApiSchemaReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimulationResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimulationResponse(SimulationResponse other) : this() {
      switch (other.ResponseCase) {
        case ResponseOneofCase.Initialize:
          Initialize = other.Initialize.Clone();
          break;
        case ResponseOneofCase.UpdateFrame:
          UpdateFrame = other.UpdateFrame.Clone();
          break;
        case ResponseOneofCase.SpawnVehicleEntity:
          SpawnVehicleEntity = other.SpawnVehicleEntity.Clone();
          break;
        case ResponseOneofCase.SpawnPedestrianEntity:
          SpawnPedestrianEntity = other.SpawnPedestrianEntity.Clone();
          break;
        case ResponseOneofCase.SpawnMiscObjectEntity:
          SpawnMiscObjectEntity = other.SpawnMiscObjectEntity.Clone();
          break;
        case ResponseOneofCase.DespawnEntity:
          DespawnEntity = other.DespawnEntity.Clone();
          break;
        case ResponseOneofCase.UpdateEntityStatus:
          UpdateEntityStatus = other.UpdateEntityStatus.Clone();
          break;
        case ResponseOneofCase.AttachLidarSensor:
          AttachLidarSensor = other.AttachLidarSensor.Clone();
          break;
        case ResponseOneofCase.AttachDetectionSensor:
          AttachDetectionSensor = other.AttachDetectionSensor.Clone();
          break;
        case ResponseOneofCase.AttachOccupancyGridSensor:
          AttachOccupancyGridSensor = other.AttachOccupancyGridSensor.Clone();
          break;
        case ResponseOneofCase.UpdateTrafficLights:
          UpdateTrafficLights = other.UpdateTrafficLights.Clone();
          break;
        case ResponseOneofCase.FollowPolylineTrajectory:
          FollowPolylineTrajectory = other.FollowPolylineTrajectory.Clone();
          break;
        case ResponseOneofCase.AttachPseudoTrafficLightDetector:
          AttachPseudoTrafficLightDetector = other.AttachPseudoTrafficLightDetector.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimulationResponse Clone() {
      return new SimulationResponse(this);
    }

    /// <summary>Field number for the "initialize" field.</summary>
    public const int InitializeFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SimulationApiSchema.InitializeResponse Initialize {
      get { return responseCase_ == ResponseOneofCase.Initialize ? (global::SimulationApiSchema.InitializeResponse) response_ : null; }
      set {
        response_ = value;
        responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.Initialize;
      }
    }

    /// <summary>Field number for the "update_frame" field.</summary>
    public const int UpdateFrameFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SimulationApiSchema.UpdateFrameResponse UpdateFrame {
      get { return responseCase_ == ResponseOneofCase.UpdateFrame ? (global::SimulationApiSchema.UpdateFrameResponse) response_ : null; }
      set {
        response_ = value;
        responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.UpdateFrame;
      }
    }

    /// <summary>Field number for the "spawn_vehicle_entity" field.</summary>
    public const int SpawnVehicleEntityFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SimulationApiSchema.SpawnVehicleEntityResponse SpawnVehicleEntity {
      get { return responseCase_ == ResponseOneofCase.SpawnVehicleEntity ? (global::SimulationApiSchema.SpawnVehicleEntityResponse) response_ : null; }
      set {
        response_ = value;
        responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.SpawnVehicleEntity;
      }
    }

    /// <summary>Field number for the "spawn_pedestrian_entity" field.</summary>
    public const int SpawnPedestrianEntityFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SimulationApiSchema.SpawnPedestrianEntityResponse SpawnPedestrianEntity {
      get { return responseCase_ == ResponseOneofCase.SpawnPedestrianEntity ? (global::SimulationApiSchema.SpawnPedestrianEntityResponse) response_ : null; }
      set {
        response_ = value;
        responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.SpawnPedestrianEntity;
      }
    }

    /// <summary>Field number for the "spawn_misc_object_entity" field.</summary>
    public const int SpawnMiscObjectEntityFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SimulationApiSchema.SpawnMiscObjectEntityResponse SpawnMiscObjectEntity {
      get { return responseCase_ == ResponseOneofCase.SpawnMiscObjectEntity ? (global::SimulationApiSchema.SpawnMiscObjectEntityResponse) response_ : null; }
      set {
        response_ = value;
        responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.SpawnMiscObjectEntity;
      }
    }

    /// <summary>Field number for the "despawn_entity" field.</summary>
    public const int DespawnEntityFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SimulationApiSchema.DespawnEntityResponse DespawnEntity {
      get { return responseCase_ == ResponseOneofCase.DespawnEntity ? (global::SimulationApiSchema.DespawnEntityResponse) response_ : null; }
      set {
        response_ = value;
        responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.DespawnEntity;
      }
    }

    /// <summary>Field number for the "update_entity_status" field.</summary>
    public const int UpdateEntityStatusFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SimulationApiSchema.UpdateEntityStatusResponse UpdateEntityStatus {
      get { return responseCase_ == ResponseOneofCase.UpdateEntityStatus ? (global::SimulationApiSchema.UpdateEntityStatusResponse) response_ : null; }
      set {
        response_ = value;
        responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.UpdateEntityStatus;
      }
    }

    /// <summary>Field number for the "attach_lidar_sensor" field.</summary>
    public const int AttachLidarSensorFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SimulationApiSchema.AttachLidarSensorResponse AttachLidarSensor {
      get { return responseCase_ == ResponseOneofCase.AttachLidarSensor ? (global::SimulationApiSchema.AttachLidarSensorResponse) response_ : null; }
      set {
        response_ = value;
        responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.AttachLidarSensor;
      }
    }

    /// <summary>Field number for the "attach_detection_sensor" field.</summary>
    public const int AttachDetectionSensorFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SimulationApiSchema.AttachDetectionSensorResponse AttachDetectionSensor {
      get { return responseCase_ == ResponseOneofCase.AttachDetectionSensor ? (global::SimulationApiSchema.AttachDetectionSensorResponse) response_ : null; }
      set {
        response_ = value;
        responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.AttachDetectionSensor;
      }
    }

    /// <summary>Field number for the "attach_occupancy_grid_sensor" field.</summary>
    public const int AttachOccupancyGridSensorFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SimulationApiSchema.AttachOccupancyGridSensorResponse AttachOccupancyGridSensor {
      get { return responseCase_ == ResponseOneofCase.AttachOccupancyGridSensor ? (global::SimulationApiSchema.AttachOccupancyGridSensorResponse) response_ : null; }
      set {
        response_ = value;
        responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.AttachOccupancyGridSensor;
      }
    }

    /// <summary>Field number for the "update_traffic_lights" field.</summary>
    public const int UpdateTrafficLightsFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SimulationApiSchema.UpdateTrafficLightsResponse UpdateTrafficLights {
      get { return responseCase_ == ResponseOneofCase.UpdateTrafficLights ? (global::SimulationApiSchema.UpdateTrafficLightsResponse) response_ : null; }
      set {
        response_ = value;
        responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.UpdateTrafficLights;
      }
    }

    /// <summary>Field number for the "follow_polyline_trajectory" field.</summary>
    public const int FollowPolylineTrajectoryFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SimulationApiSchema.FollowPolylineTrajectoryResponse FollowPolylineTrajectory {
      get { return responseCase_ == ResponseOneofCase.FollowPolylineTrajectory ? (global::SimulationApiSchema.FollowPolylineTrajectoryResponse) response_ : null; }
      set {
        response_ = value;
        responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.FollowPolylineTrajectory;
      }
    }

    /// <summary>Field number for the "attach_pseudo_traffic_light_detector" field.</summary>
    public const int AttachPseudoTrafficLightDetectorFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SimulationApiSchema.AttachPseudoTrafficLightDetectorResponse AttachPseudoTrafficLightDetector {
      get { return responseCase_ == ResponseOneofCase.AttachPseudoTrafficLightDetector ? (global::SimulationApiSchema.AttachPseudoTrafficLightDetectorResponse) response_ : null; }
      set {
        response_ = value;
        responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.AttachPseudoTrafficLightDetector;
      }
    }

    private object response_;
    /// <summary>Enum of possible cases for the "response" oneof.</summary>
    public enum ResponseOneofCase {
      None = 0,
      Initialize = 1,
      UpdateFrame = 2,
      SpawnVehicleEntity = 3,
      SpawnPedestrianEntity = 4,
      SpawnMiscObjectEntity = 5,
      DespawnEntity = 6,
      UpdateEntityStatus = 7,
      AttachLidarSensor = 8,
      AttachDetectionSensor = 9,
      AttachOccupancyGridSensor = 10,
      UpdateTrafficLights = 11,
      FollowPolylineTrajectory = 12,
      AttachPseudoTrafficLightDetector = 13,
    }
    private ResponseOneofCase responseCase_ = ResponseOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseOneofCase ResponseCase {
      get { return responseCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResponse() {
      responseCase_ = ResponseOneofCase.None;
      response_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SimulationResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SimulationResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Initialize, other.Initialize)) return false;
      if (!object.Equals(UpdateFrame, other.UpdateFrame)) return false;
      if (!object.Equals(SpawnVehicleEntity, other.SpawnVehicleEntity)) return false;
      if (!object.Equals(SpawnPedestrianEntity, other.SpawnPedestrianEntity)) return false;
      if (!object.Equals(SpawnMiscObjectEntity, other.SpawnMiscObjectEntity)) return false;
      if (!object.Equals(DespawnEntity, other.DespawnEntity)) return false;
      if (!object.Equals(UpdateEntityStatus, other.UpdateEntityStatus)) return false;
      if (!object.Equals(AttachLidarSensor, other.AttachLidarSensor)) return false;
      if (!object.Equals(AttachDetectionSensor, other.AttachDetectionSensor)) return false;
      if (!object.Equals(AttachOccupancyGridSensor, other.AttachOccupancyGridSensor)) return false;
      if (!object.Equals(UpdateTrafficLights, other.UpdateTrafficLights)) return false;
      if (!object.Equals(FollowPolylineTrajectory, other.FollowPolylineTrajectory)) return false;
      if (!object.Equals(AttachPseudoTrafficLightDetector, other.AttachPseudoTrafficLightDetector)) return false;
      if (ResponseCase != other.ResponseCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (responseCase_ == ResponseOneofCase.Initialize) hash ^= Initialize.GetHashCode();
      if (responseCase_ == ResponseOneofCase.UpdateFrame) hash ^= UpdateFrame.GetHashCode();
      if (responseCase_ == ResponseOneofCase.SpawnVehicleEntity) hash ^= SpawnVehicleEntity.GetHashCode();
      if (responseCase_ == ResponseOneofCase.SpawnPedestrianEntity) hash ^= SpawnPedestrianEntity.GetHashCode();
      if (responseCase_ == ResponseOneofCase.SpawnMiscObjectEntity) hash ^= SpawnMiscObjectEntity.GetHashCode();
      if (responseCase_ == ResponseOneofCase.DespawnEntity) hash ^= DespawnEntity.GetHashCode();
      if (responseCase_ == ResponseOneofCase.UpdateEntityStatus) hash ^= UpdateEntityStatus.GetHashCode();
      if (responseCase_ == ResponseOneofCase.AttachLidarSensor) hash ^= AttachLidarSensor.GetHashCode();
      if (responseCase_ == ResponseOneofCase.AttachDetectionSensor) hash ^= AttachDetectionSensor.GetHashCode();
      if (responseCase_ == ResponseOneofCase.AttachOccupancyGridSensor) hash ^= AttachOccupancyGridSensor.GetHashCode();
      if (responseCase_ == ResponseOneofCase.UpdateTrafficLights) hash ^= UpdateTrafficLights.GetHashCode();
      if (responseCase_ == ResponseOneofCase.FollowPolylineTrajectory) hash ^= FollowPolylineTrajectory.GetHashCode();
      if (responseCase_ == ResponseOneofCase.AttachPseudoTrafficLightDetector) hash ^= AttachPseudoTrafficLightDetector.GetHashCode();
      hash ^= (int) responseCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (responseCase_ == ResponseOneofCase.Initialize) {
        output.WriteRawTag(10);
        output.WriteMessage(Initialize);
      }
      if (responseCase_ == ResponseOneofCase.UpdateFrame) {
        output.WriteRawTag(18);
        output.WriteMessage(UpdateFrame);
      }
      if (responseCase_ == ResponseOneofCase.SpawnVehicleEntity) {
        output.WriteRawTag(26);
        output.WriteMessage(SpawnVehicleEntity);
      }
      if (responseCase_ == ResponseOneofCase.SpawnPedestrianEntity) {
        output.WriteRawTag(34);
        output.WriteMessage(SpawnPedestrianEntity);
      }
      if (responseCase_ == ResponseOneofCase.SpawnMiscObjectEntity) {
        output.WriteRawTag(42);
        output.WriteMessage(SpawnMiscObjectEntity);
      }
      if (responseCase_ == ResponseOneofCase.DespawnEntity) {
        output.WriteRawTag(50);
        output.WriteMessage(DespawnEntity);
      }
      if (responseCase_ == ResponseOneofCase.UpdateEntityStatus) {
        output.WriteRawTag(58);
        output.WriteMessage(UpdateEntityStatus);
      }
      if (responseCase_ == ResponseOneofCase.AttachLidarSensor) {
        output.WriteRawTag(66);
        output.WriteMessage(AttachLidarSensor);
      }
      if (responseCase_ == ResponseOneofCase.AttachDetectionSensor) {
        output.WriteRawTag(74);
        output.WriteMessage(AttachDetectionSensor);
      }
      if (responseCase_ == ResponseOneofCase.AttachOccupancyGridSensor) {
        output.WriteRawTag(82);
        output.WriteMessage(AttachOccupancyGridSensor);
      }
      if (responseCase_ == ResponseOneofCase.UpdateTrafficLights) {
        output.WriteRawTag(90);
        output.WriteMessage(UpdateTrafficLights);
      }
      if (responseCase_ == ResponseOneofCase.FollowPolylineTrajectory) {
        output.WriteRawTag(98);
        output.WriteMessage(FollowPolylineTrajectory);
      }
      if (responseCase_ == ResponseOneofCase.AttachPseudoTrafficLightDetector) {
        output.WriteRawTag(106);
        output.WriteMessage(AttachPseudoTrafficLightDetector);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (responseCase_ == ResponseOneofCase.Initialize) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Initialize);
      }
      if (responseCase_ == ResponseOneofCase.UpdateFrame) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateFrame);
      }
      if (responseCase_ == ResponseOneofCase.SpawnVehicleEntity) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SpawnVehicleEntity);
      }
      if (responseCase_ == ResponseOneofCase.SpawnPedestrianEntity) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SpawnPedestrianEntity);
      }
      if (responseCase_ == ResponseOneofCase.SpawnMiscObjectEntity) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SpawnMiscObjectEntity);
      }
      if (responseCase_ == ResponseOneofCase.DespawnEntity) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DespawnEntity);
      }
      if (responseCase_ == ResponseOneofCase.UpdateEntityStatus) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateEntityStatus);
      }
      if (responseCase_ == ResponseOneofCase.AttachLidarSensor) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AttachLidarSensor);
      }
      if (responseCase_ == ResponseOneofCase.AttachDetectionSensor) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AttachDetectionSensor);
      }
      if (responseCase_ == ResponseOneofCase.AttachOccupancyGridSensor) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AttachOccupancyGridSensor);
      }
      if (responseCase_ == ResponseOneofCase.UpdateTrafficLights) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateTrafficLights);
      }
      if (responseCase_ == ResponseOneofCase.FollowPolylineTrajectory) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FollowPolylineTrajectory);
      }
      if (responseCase_ == ResponseOneofCase.AttachPseudoTrafficLightDetector) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AttachPseudoTrafficLightDetector);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SimulationResponse other) {
      if (other == null) {
        return;
      }
      switch (other.ResponseCase) {
        case ResponseOneofCase.Initialize:
          if (Initialize == null) {
            Initialize = new global::SimulationApiSchema.InitializeResponse();
          }
          Initialize.MergeFrom(other.Initialize);
          break;
        case ResponseOneofCase.UpdateFrame:
          if (UpdateFrame == null) {
            UpdateFrame = new global::SimulationApiSchema.UpdateFrameResponse();
          }
          UpdateFrame.MergeFrom(other.UpdateFrame);
          break;
        case ResponseOneofCase.SpawnVehicleEntity:
          if (SpawnVehicleEntity == null) {
            SpawnVehicleEntity = new global::SimulationApiSchema.SpawnVehicleEntityResponse();
          }
          SpawnVehicleEntity.MergeFrom(other.SpawnVehicleEntity);
          break;
        case ResponseOneofCase.SpawnPedestrianEntity:
          if (SpawnPedestrianEntity == null) {
            SpawnPedestrianEntity = new global::SimulationApiSchema.SpawnPedestrianEntityResponse();
          }
          SpawnPedestrianEntity.MergeFrom(other.SpawnPedestrianEntity);
          break;
        case ResponseOneofCase.SpawnMiscObjectEntity:
          if (SpawnMiscObjectEntity == null) {
            SpawnMiscObjectEntity = new global::SimulationApiSchema.SpawnMiscObjectEntityResponse();
          }
          SpawnMiscObjectEntity.MergeFrom(other.SpawnMiscObjectEntity);
          break;
        case ResponseOneofCase.DespawnEntity:
          if (DespawnEntity == null) {
            DespawnEntity = new global::SimulationApiSchema.DespawnEntityResponse();
          }
          DespawnEntity.MergeFrom(other.DespawnEntity);
          break;
        case ResponseOneofCase.UpdateEntityStatus:
          if (UpdateEntityStatus == null) {
            UpdateEntityStatus = new global::SimulationApiSchema.UpdateEntityStatusResponse();
          }
          UpdateEntityStatus.MergeFrom(other.UpdateEntityStatus);
          break;
        case ResponseOneofCase.AttachLidarSensor:
          if (AttachLidarSensor == null) {
            AttachLidarSensor = new global::SimulationApiSchema.AttachLidarSensorResponse();
          }
          AttachLidarSensor.MergeFrom(other.AttachLidarSensor);
          break;
        case ResponseOneofCase.AttachDetectionSensor:
          if (AttachDetectionSensor == null) {
            AttachDetectionSensor = new global::SimulationApiSchema.AttachDetectionSensorResponse();
          }
          AttachDetectionSensor.MergeFrom(other.AttachDetectionSensor);
          break;
        case ResponseOneofCase.AttachOccupancyGridSensor:
          if (AttachOccupancyGridSensor == null) {
            AttachOccupancyGridSensor = new global::SimulationApiSchema.AttachOccupancyGridSensorResponse();
          }
          AttachOccupancyGridSensor.MergeFrom(other.AttachOccupancyGridSensor);
          break;
        case ResponseOneofCase.UpdateTrafficLights:
          if (UpdateTrafficLights == null) {
            UpdateTrafficLights = new global::SimulationApiSchema.UpdateTrafficLightsResponse();
          }
          UpdateTrafficLights.MergeFrom(other.UpdateTrafficLights);
          break;
        case ResponseOneofCase.FollowPolylineTrajectory:
          if (FollowPolylineTrajectory == null) {
            FollowPolylineTrajectory = new global::SimulationApiSchema.FollowPolylineTrajectoryResponse();
          }
          FollowPolylineTrajectory.MergeFrom(other.FollowPolylineTrajectory);
          break;
        case ResponseOneofCase.AttachPseudoTrafficLightDetector:
          if (AttachPseudoTrafficLightDetector == null) {
            AttachPseudoTrafficLightDetector = new global::SimulationApiSchema.AttachPseudoTrafficLightDetectorResponse();
          }
          AttachPseudoTrafficLightDetector.MergeFrom(other.AttachPseudoTrafficLightDetector);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::SimulationApiSchema.InitializeResponse subBuilder = new global::SimulationApiSchema.InitializeResponse();
            if (responseCase_ == ResponseOneofCase.Initialize) {
              subBuilder.MergeFrom(Initialize);
            }
            input.ReadMessage(subBuilder);
            Initialize = subBuilder;
            break;
          }
          case 18: {
            global::SimulationApiSchema.UpdateFrameResponse subBuilder = new global::SimulationApiSchema.UpdateFrameResponse();
            if (responseCase_ == ResponseOneofCase.UpdateFrame) {
              subBuilder.MergeFrom(UpdateFrame);
            }
            input.ReadMessage(subBuilder);
            UpdateFrame = subBuilder;
            break;
          }
          case 26: {
            global::SimulationApiSchema.SpawnVehicleEntityResponse subBuilder = new global::SimulationApiSchema.SpawnVehicleEntityResponse();
            if (responseCase_ == ResponseOneofCase.SpawnVehicleEntity) {
              subBuilder.MergeFrom(SpawnVehicleEntity);
            }
            input.ReadMessage(subBuilder);
            SpawnVehicleEntity = subBuilder;
            break;
          }
          case 34: {
            global::SimulationApiSchema.SpawnPedestrianEntityResponse subBuilder = new global::SimulationApiSchema.SpawnPedestrianEntityResponse();
            if (responseCase_ == ResponseOneofCase.SpawnPedestrianEntity) {
              subBuilder.MergeFrom(SpawnPedestrianEntity);
            }
            input.ReadMessage(subBuilder);
            SpawnPedestrianEntity = subBuilder;
            break;
          }
          case 42: {
            global::SimulationApiSchema.SpawnMiscObjectEntityResponse subBuilder = new global::SimulationApiSchema.SpawnMiscObjectEntityResponse();
            if (responseCase_ == ResponseOneofCase.SpawnMiscObjectEntity) {
              subBuilder.MergeFrom(SpawnMiscObjectEntity);
            }
            input.ReadMessage(subBuilder);
            SpawnMiscObjectEntity = subBuilder;
            break;
          }
          case 50: {
            global::SimulationApiSchema.DespawnEntityResponse subBuilder = new global::SimulationApiSchema.DespawnEntityResponse();
            if (responseCase_ == ResponseOneofCase.DespawnEntity) {
              subBuilder.MergeFrom(DespawnEntity);
            }
            input.ReadMessage(subBuilder);
            DespawnEntity = subBuilder;
            break;
          }
          case 58: {
            global::SimulationApiSchema.UpdateEntityStatusResponse subBuilder = new global::SimulationApiSchema.UpdateEntityStatusResponse();
            if (responseCase_ == ResponseOneofCase.UpdateEntityStatus) {
              subBuilder.MergeFrom(UpdateEntityStatus);
            }
            input.ReadMessage(subBuilder);
            UpdateEntityStatus = subBuilder;
            break;
          }
          case 66: {
            global::SimulationApiSchema.AttachLidarSensorResponse subBuilder = new global::SimulationApiSchema.AttachLidarSensorResponse();
            if (responseCase_ == ResponseOneofCase.AttachLidarSensor) {
              subBuilder.MergeFrom(AttachLidarSensor);
            }
            input.ReadMessage(subBuilder);
            AttachLidarSensor = subBuilder;
            break;
          }
          case 74: {
            global::SimulationApiSchema.AttachDetectionSensorResponse subBuilder = new global::SimulationApiSchema.AttachDetectionSensorResponse();
            if (responseCase_ == ResponseOneofCase.AttachDetectionSensor) {
              subBuilder.MergeFrom(AttachDetectionSensor);
            }
            input.ReadMessage(subBuilder);
            AttachDetectionSensor = subBuilder;
            break;
          }
          case 82: {
            global::SimulationApiSchema.AttachOccupancyGridSensorResponse subBuilder = new global::SimulationApiSchema.AttachOccupancyGridSensorResponse();
            if (responseCase_ == ResponseOneofCase.AttachOccupancyGridSensor) {
              subBuilder.MergeFrom(AttachOccupancyGridSensor);
            }
            input.ReadMessage(subBuilder);
            AttachOccupancyGridSensor = subBuilder;
            break;
          }
          case 90: {
            global::SimulationApiSchema.UpdateTrafficLightsResponse subBuilder = new global::SimulationApiSchema.UpdateTrafficLightsResponse();
            if (responseCase_ == ResponseOneofCase.UpdateTrafficLights) {
              subBuilder.MergeFrom(UpdateTrafficLights);
            }
            input.ReadMessage(subBuilder);
            UpdateTrafficLights = subBuilder;
            break;
          }
          case 98: {
            global::SimulationApiSchema.FollowPolylineTrajectoryResponse subBuilder = new global::SimulationApiSchema.FollowPolylineTrajectoryResponse();
            if (responseCase_ == ResponseOneofCase.FollowPolylineTrajectory) {
              subBuilder.MergeFrom(FollowPolylineTrajectory);
            }
            input.ReadMessage(subBuilder);
            FollowPolylineTrajectory = subBuilder;
            break;
          }
          case 106: {
            global::SimulationApiSchema.AttachPseudoTrafficLightDetectorResponse subBuilder = new global::SimulationApiSchema.AttachPseudoTrafficLightDetectorResponse();
            if (responseCase_ == ResponseOneofCase.AttachPseudoTrafficLightDetector) {
              subBuilder.MergeFrom(AttachPseudoTrafficLightDetector);
            }
            input.ReadMessage(subBuilder);
            AttachPseudoTrafficLightDetector = subBuilder;
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
